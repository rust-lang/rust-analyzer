(function() {
    var type_impls = Object.fromEntries([["vfs",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Sender%3CT%3E\" class=\"impl\"><a href=\"#impl-Clone-for-Sender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for Sender&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Sender&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/core/clone.rs.html#245-247\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","vfs::loader::Sender"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Sender%3CT%3E\" class=\"impl\"><a href=\"#impl-Debug-for-Sender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for Sender&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","vfs::loader::Sender"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-Sender%3CT%3E\" class=\"impl\"><a href=\"#impl-Drop-for-Sender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for Sender&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.91.0/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","vfs::loader::Sender"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sender%3CT%3E\" class=\"impl\"><a href=\"#impl-Sender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Sender&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_send\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_send</a>(&amp;self, msg: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.unit.html\">()</a>, TrySendError&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to send a message into the channel without blocking.</p>\n<p>This method will either send a message into the channel immediately or return an error if\nthe channel is full or disconnected. The returned error contains the original message.</p>\n<p>If called on a zero-capacity channel, this method will send the message only if there\nhappens to be a receive operation on the other side of the channel at the same time.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>crossbeam_channel::{bounded, TrySendError};\n\n<span class=\"kw\">let </span>(s, r) = bounded(<span class=\"number\">1</span>);\n\n<span class=\"macro\">assert_eq!</span>(s.try_send(<span class=\"number\">1</span>), <span class=\"prelude-val\">Ok</span>(()));\n<span class=\"macro\">assert_eq!</span>(s.try_send(<span class=\"number\">2</span>), <span class=\"prelude-val\">Err</span>(TrySendError::Full(<span class=\"number\">2</span>)));\n\ndrop(r);\n<span class=\"macro\">assert_eq!</span>(s.try_send(<span class=\"number\">3</span>), <span class=\"prelude-val\">Err</span>(TrySendError::Disconnected(<span class=\"number\">3</span>)));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.send\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">send</a>(&amp;self, msg: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.unit.html\">()</a>, SendError&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Blocks the current thread until a message is sent or the channel is disconnected.</p>\n<p>If the channel is full and not disconnected, this call will block until the send operation\ncan proceed. If the channel becomes disconnected, this call will wake up and return an\nerror. The returned error contains the original message.</p>\n<p>If called on a zero-capacity channel, this method will wait for a receive operation to\nappear on the other side of the channel.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::thread;\n<span class=\"kw\">use </span>std::time::Duration;\n<span class=\"kw\">use </span>crossbeam_channel::{bounded, SendError};\n\n<span class=\"kw\">let </span>(s, r) = bounded(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(s.send(<span class=\"number\">1</span>), <span class=\"prelude-val\">Ok</span>(()));\n\nthread::spawn(<span class=\"kw\">move </span>|| {\n    <span class=\"macro\">assert_eq!</span>(r.recv(), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">1</span>));\n    thread::sleep(Duration::from_secs(<span class=\"number\">1</span>));\n    drop(r);\n});\n\n<span class=\"macro\">assert_eq!</span>(s.send(<span class=\"number\">2</span>), <span class=\"prelude-val\">Ok</span>(()));\n<span class=\"macro\">assert_eq!</span>(s.send(<span class=\"number\">3</span>), <span class=\"prelude-val\">Err</span>(SendError(<span class=\"number\">3</span>)));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.send_timeout\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">send_timeout</a>(\n    &amp;self,\n    msg: T,\n    timeout: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.unit.html\">()</a>, SendTimeoutError&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Waits for a message to be sent into the channel, but only for a limited time.</p>\n<p>If the channel is full and not disconnected, this call will block until the send operation\ncan proceed or the operation times out. If the channel becomes disconnected, this call will\nwake up and return an error. The returned error contains the original message.</p>\n<p>If called on a zero-capacity channel, this method will wait for a receive operation to\nappear on the other side of the channel.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::thread;\n<span class=\"kw\">use </span>std::time::Duration;\n<span class=\"kw\">use </span>crossbeam_channel::{bounded, SendTimeoutError};\n\n<span class=\"kw\">let </span>(s, r) = bounded(<span class=\"number\">0</span>);\n\nthread::spawn(<span class=\"kw\">move </span>|| {\n    thread::sleep(Duration::from_secs(<span class=\"number\">1</span>));\n    <span class=\"macro\">assert_eq!</span>(r.recv(), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">2</span>));\n    drop(r);\n});\n\n<span class=\"macro\">assert_eq!</span>(\n    s.send_timeout(<span class=\"number\">1</span>, Duration::from_millis(<span class=\"number\">500</span>)),\n    <span class=\"prelude-val\">Err</span>(SendTimeoutError::Timeout(<span class=\"number\">1</span>)),\n);\n<span class=\"macro\">assert_eq!</span>(\n    s.send_timeout(<span class=\"number\">2</span>, Duration::from_secs(<span class=\"number\">1</span>)),\n    <span class=\"prelude-val\">Ok</span>(()),\n);\n<span class=\"macro\">assert_eq!</span>(\n    s.send_timeout(<span class=\"number\">3</span>, Duration::from_millis(<span class=\"number\">500</span>)),\n    <span class=\"prelude-val\">Err</span>(SendTimeoutError::Disconnected(<span class=\"number\">3</span>)),\n);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.send_deadline\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">send_deadline</a>(\n    &amp;self,\n    msg: T,\n    deadline: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/std/time/struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.unit.html\">()</a>, SendTimeoutError&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Waits for a message to be sent into the channel, but only until a given deadline.</p>\n<p>If the channel is full and not disconnected, this call will block until the send operation\ncan proceed or the operation times out. If the channel becomes disconnected, this call will\nwake up and return an error. The returned error contains the original message.</p>\n<p>If called on a zero-capacity channel, this method will wait for a receive operation to\nappear on the other side of the channel.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::thread;\n<span class=\"kw\">use </span>std::time::{Duration, Instant};\n<span class=\"kw\">use </span>crossbeam_channel::{bounded, SendTimeoutError};\n\n<span class=\"kw\">let </span>(s, r) = bounded(<span class=\"number\">0</span>);\n\nthread::spawn(<span class=\"kw\">move </span>|| {\n    thread::sleep(Duration::from_secs(<span class=\"number\">1</span>));\n    <span class=\"macro\">assert_eq!</span>(r.recv(), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">2</span>));\n    drop(r);\n});\n\n<span class=\"kw\">let </span>now = Instant::now();\n\n<span class=\"macro\">assert_eq!</span>(\n    s.send_deadline(<span class=\"number\">1</span>, now + Duration::from_millis(<span class=\"number\">500</span>)),\n    <span class=\"prelude-val\">Err</span>(SendTimeoutError::Timeout(<span class=\"number\">1</span>)),\n);\n<span class=\"macro\">assert_eq!</span>(\n    s.send_deadline(<span class=\"number\">2</span>, now + Duration::from_millis(<span class=\"number\">1500</span>)),\n    <span class=\"prelude-val\">Ok</span>(()),\n);\n<span class=\"macro\">assert_eq!</span>(\n    s.send_deadline(<span class=\"number\">3</span>, now + Duration::from_millis(<span class=\"number\">2000</span>)),\n    <span class=\"prelude-val\">Err</span>(SendTimeoutError::Disconnected(<span class=\"number\">3</span>)),\n);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the channel is empty.</p>\n<p>Note: Zero-capacity channels are always empty.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>crossbeam_channel::unbounded;\n\n<span class=\"kw\">let </span>(s, r) = unbounded();\n<span class=\"macro\">assert!</span>(s.is_empty());\n\ns.send(<span class=\"number\">0</span>).unwrap();\n<span class=\"macro\">assert!</span>(!s.is_empty());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_full\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_full</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the channel is full.</p>\n<p>Note: Zero-capacity channels are always full.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>crossbeam_channel::bounded;\n\n<span class=\"kw\">let </span>(s, r) = bounded(<span class=\"number\">1</span>);\n\n<span class=\"macro\">assert!</span>(!s.is_full());\ns.send(<span class=\"number\">0</span>).unwrap();\n<span class=\"macro\">assert!</span>(s.is_full());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of messages in the channel.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>crossbeam_channel::unbounded;\n\n<span class=\"kw\">let </span>(s, r) = unbounded();\n<span class=\"macro\">assert_eq!</span>(s.len(), <span class=\"number\">0</span>);\n\ns.send(<span class=\"number\">1</span>).unwrap();\ns.send(<span class=\"number\">2</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(s.len(), <span class=\"number\">2</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>If the channel is bounded, returns its capacity.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>crossbeam_channel::{bounded, unbounded};\n\n<span class=\"kw\">let </span>(s, <span class=\"kw\">_</span>) = unbounded::&lt;i32&gt;();\n<span class=\"macro\">assert_eq!</span>(s.capacity(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>(s, <span class=\"kw\">_</span>) = bounded::&lt;i32&gt;(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(s.capacity(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n\n<span class=\"kw\">let </span>(s, <span class=\"kw\">_</span>) = bounded::&lt;i32&gt;(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(s.capacity(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.same_channel\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">same_channel</a>(&amp;self, other: &amp;Sender&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if senders belong to the same channel.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>crossbeam_channel::unbounded;\n\n<span class=\"kw\">let </span>(s, <span class=\"kw\">_</span>) = unbounded::&lt;usize&gt;();\n\n<span class=\"kw\">let </span>s2 = s.clone();\n<span class=\"macro\">assert!</span>(s.same_channel(<span class=\"kw-2\">&amp;</span>s2));\n\n<span class=\"kw\">let </span>(s3, <span class=\"kw\">_</span>) = unbounded();\n<span class=\"macro\">assert!</span>(!s.same_channel(<span class=\"kw-2\">&amp;</span>s3));</code></pre></div></div></details></div></details>",0,"vfs::loader::Sender"],["<section id=\"impl-RefUnwindSafe-for-Sender%3CT%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-Sender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/panic/unwind_safe/trait.RefUnwindSafe.html\" title=\"trait core::panic::unwind_safe::RefUnwindSafe\">RefUnwindSafe</a> for Sender&lt;T&gt;</h3></section>","RefUnwindSafe","vfs::loader::Sender"],["<section id=\"impl-Send-for-Sender%3CT%3E\" class=\"impl\"><a href=\"#impl-Send-for-Sender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for Sender&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h3></section>","Send","vfs::loader::Sender"],["<section id=\"impl-Sync-for-Sender%3CT%3E\" class=\"impl\"><a href=\"#impl-Sync-for-Sender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for Sender&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h3></section>","Sync","vfs::loader::Sender"],["<section id=\"impl-UnwindSafe-for-Sender%3CT%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-Sender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/panic/unwind_safe/trait.UnwindSafe.html\" title=\"trait core::panic::unwind_safe::UnwindSafe\">UnwindSafe</a> for Sender&lt;T&gt;</h3></section>","UnwindSafe","vfs::loader::Sender"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[21287]}