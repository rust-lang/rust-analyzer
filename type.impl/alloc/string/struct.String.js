(function() {
    var type_impls = Object.fromEntries([["xtask",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26str%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2676\">Source</a></span><a href=\"#impl-Add%3C%26str%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3><div class=\"docblock\"><p>Implements the <code>+</code> operator for concatenating two strings.</p>\n</div></section></summary><div class=\"docblock\"><p>This consumes the <code>String</code> on the left-hand side and re-uses its buffer (growing it if\nnecessary). This is done to avoid allocating a new <code>String</code> and copying the entire contents on\nevery operation, which would lead to <em>O</em>(<em>n</em>^2) running time when building an <em>n</em>-byte string by\nrepeated concatenation.</p>\n<p>The string on the right-hand side is only borrowed; its contents are copied into the returned\n<code>String</code>.</p>\n<h4 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h4>\n<p>Concatenating two <code>String</code>s takes the first by value and borrows the second:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = String::from(<span class=\"string\">\"hello\"</span>);\n<span class=\"kw\">let </span>b = String::from(<span class=\"string\">\" world\"</span>);\n<span class=\"kw\">let </span>c = a + <span class=\"kw-2\">&amp;</span>b;\n<span class=\"comment\">// `a` is moved and can no longer be used here.</span></code></pre></div>\n<p>If you want to keep using the first <code>String</code>, you can clone it and append to the clone instead:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = String::from(<span class=\"string\">\"hello\"</span>);\n<span class=\"kw\">let </span>b = String::from(<span class=\"string\">\" world\"</span>);\n<span class=\"kw\">let </span>c = a.clone() + <span class=\"kw-2\">&amp;</span>b;\n<span class=\"comment\">// `a` is still valid here.</span></code></pre></div>\n<p>Concatenating <code>&amp;str</code> slices can be done by converting the first to a <code>String</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = <span class=\"string\">\"hello\"</span>;\n<span class=\"kw\">let </span>b = <span class=\"string\">\" world\"</span>;\n<span class=\"kw\">let </span>c = a.to_string() + b;</code></pre></div></div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2677\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.91.0/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2680\">Source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/1.91.0/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<&str>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3C%26str%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2691\">Source</a></span><a href=\"#impl-AddAssign%3C%26str%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/ops/arith/trait.AddAssign.html\" title=\"trait core::ops::arith::AddAssign\">AddAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3><div class=\"docblock\"><p>Implements the <code>+=</code> operator for appending to a <code>String</code>.</p>\n</div></section></summary><div class=\"docblock\"><p>This has the same behavior as the <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#method.push_str\" title=\"method alloc::string::String::push_str\"><code>push_str</code></a> method.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2693\">Source</a><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"https://doc.rust-lang.org/1.91.0/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign<&str>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3Cstr%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2996\">Source</a></span><a href=\"#impl-AsMut%3Cstr%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2998\">Source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<str>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%5Bu8%5D%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#3004\">Source</a></span><a href=\"#impl-AsRef%3C%5Bu8%5D%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.u8.html\">u8</a>]&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#3006\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<[u8]>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3COsStr%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/std/ffi/os_str.rs.html#1712\">Source</a></span><a href=\"#impl-AsRef%3COsStr%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/std/ffi/os_str.rs.html#1714\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<OsStr>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CPath%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/std/path.rs.html#3559\">Source</a></span><a href=\"#impl-AsRef%3CPath%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/std/path.rs.html#3561\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<Path>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3Cstr%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2988\">Source</a></span><a href=\"#impl-AsRef%3Cstr%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2990\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<str>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Borrow%3Cstr%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/str.rs.html#189\">Source</a></span><a href=\"#impl-Borrow%3Cstr%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/str.rs.html#191\">Source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Immutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/1.91.0/core/borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details>","Borrow<str>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BorrowMut%3Cstr%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/str.rs.html#197\">Source</a></span><a href=\"#impl-BorrowMut%3Cstr%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/str.rs.html#199\">Source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Mutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/1.91.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details>","BorrowMut<str>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2295\">Source</a></span><a href=\"#impl-Clone-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2306\">Source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>)</h4></section></summary><div class=\"docblock\"><p>Clones the contents of <code>source</code> into <code>self</code>.</p>\n<p>This method is preferred over simply assigning <code>source.clone()</code> to <code>self</code>,\nas it avoids reallocation if possible.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2297\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details></div></details>","Clone","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2622\">Source</a></span><a href=\"#impl-Debug-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2624\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143894\" title=\"Tracking issue for const_default\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2605\">Source</a></span><a href=\"#impl-Default-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2608\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>String</code>.</p>\n</div></details></div></details>","Default","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2723\">Source</a></span><a href=\"#impl-Deref-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2724\">Source</a><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.91.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2727\">Source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2736\">Source</a></span><a href=\"#impl-DerefMut-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2738\">Source</a><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/ops/deref/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-String\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_core/1.0.226/src/serde_core/de/impls.rs.html#688\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de&gt; <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.226/serde_core/de/trait.Deserialize.html\" title=\"trait serde_core::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_core/1.0.226/src/serde_core/de/impls.rs.html#689-691\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_core/1.0.226/serde_core/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.226/serde_core/de/trait.Deserializer.html\" title=\"trait serde_core::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde_core/1.0.226/serde_core/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde_core::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.226/serde_core/de/trait.Deserializer.html\" title=\"trait serde_core::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde_core/1.0.226/serde_core/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2614\">Source</a></span><a href=\"#impl-Display-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2616\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C%26Char%3E-for-String\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2494\">Source</a><a href=\"#impl-Extend%3C%26Char%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;&amp;'a <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/ascii/ascii_char/enum.AsciiChar.html\" title=\"enum core::ascii::ascii_char::AsciiChar\">AsciiChar</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2497\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/ascii/ascii_char/enum.AsciiChar.html\" title=\"enum core::ascii::ascii_char::AsciiChar\">AsciiChar</a>&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2503\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, c: &amp;'a <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/ascii/ascii_char/enum.AsciiChar.html\" title=\"enum core::ascii::ascii_char::AsciiChar\">AsciiChar</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/core/iter/traits/collect.rs.html#425\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<&'a AsciiChar>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C%26char%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2413\">Source</a></span><a href=\"#impl-Extend%3C%26char%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.char.html\">char</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2414\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.char.html\">char</a>&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2419\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, _: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.char.html\">char</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2424\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<&'a char>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C%26str%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2431\">Source</a></span><a href=\"#impl-Extend%3C%26str%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2432\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2437\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, s: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/core/iter/traits/collect.rs.html#425\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<&'a str>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CBox%3Cstr,+A%3E%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2444\">Source</a></span><a href=\"#impl-Extend%3CBox%3Cstr,+A%3E%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2445\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>, A&gt;&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/core/iter/traits/collect.rs.html#417\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/core/iter/traits/collect.rs.html#425\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<Box<str, A>>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CChar%3E-for-String\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2478\">Source</a><a href=\"#impl-Extend%3CChar%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/ascii/ascii_char/enum.AsciiChar.html\" title=\"enum core::ascii::ascii_char::AsciiChar\">AsciiChar</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2481\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/ascii/ascii_char/enum.AsciiChar.html\" title=\"enum core::ascii::ascii_char::AsciiChar\">AsciiChar</a>&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2487\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, c: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/ascii/ascii_char/enum.AsciiChar.html\" title=\"enum core::ascii::ascii_char::AsciiChar\">AsciiChar</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/core/iter/traits/collect.rs.html#425\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<AsciiChar>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CCow%3C'a,+str%3E%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.19.0\">1.19.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2465\">Source</a></span><a href=\"#impl-Extend%3CCow%3C'a,+str%3E%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2466\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>&gt;&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2471\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, s: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>&gt;)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/core/iter/traits/collect.rs.html#425\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<Cow<'a, str>>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CString%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2452\">Source</a></span><a href=\"#impl-Extend%3CString%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2453\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2458\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, s: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/core/iter/traits/collect.rs.html#425\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<String>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3Cchar%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2392\">Source</a></span><a href=\"#impl-Extend%3Cchar%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.char.html\">char</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2393\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.char.html\">char</a>&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2401\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, c: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.char.html\">char</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2406\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<char>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26String%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0\">1.35.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#3037\">Source</a></span><a href=\"#impl-From%3C%26String%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#3042\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>&amp;String</code> into a <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\"><code>String</code></a>.</p>\n<p>This clones <code>s</code> and returns the clone.</p>\n</div></details></div></details>","From<&String>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26mut+str%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.44.0\">1.44.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#3025\">Source</a></span><a href=\"#impl-From%3C%26mut+str%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#3030\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>&amp;mut str</code> into a <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\"><code>String</code></a>.</p>\n<p>The result is allocated on the heap.</p>\n</div></details></div></details>","From<&mut str>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26str%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#3013\">Source</a></span><a href=\"#impl-From%3C%26str%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#3018\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>&amp;str</code> into a <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\"><code>String</code></a>.</p>\n<p>The result is allocated on the heap.</p>\n</div></details></div></details>","From<&str>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBox%3Cstr%3E%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.18.0\">1.18.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#3049\">Source</a></span><a href=\"#impl-From%3CBox%3Cstr%3E%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#3062\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Converts the given boxed <code>str</code> slice to a <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\"><code>String</code></a>.\nIt is notable that the <code>str</code> slice is owned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s1: String = String::from(<span class=\"string\">\"hello world\"</span>);\n<span class=\"kw\">let </span>s2: Box&lt;str&gt; = s1.into_boxed_str();\n<span class=\"kw\">let </span>s3: String = String::from(s2);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"hello world\"</span>, s3)</code></pre></div></div></details></div></details>","From<Box<str>>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCow%3C'a,+str%3E%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.14.0\">1.14.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#3088\">Source</a></span><a href=\"#impl-From%3CCow%3C'a,+str%3E%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#3105\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Converts a clone-on-write string to an owned\ninstance of <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\"><code>String</code></a>.</p>\n<p>This extracts the owned string,\nclones the string if it is not already owned.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// If the string is not owned...\n</span><span class=\"kw\">let </span>cow: Cow&lt;<span class=\"lifetime\">'_</span>, str&gt; = Cow::Borrowed(<span class=\"string\">\"eggplant\"</span>);\n<span class=\"comment\">// It will allocate on the heap and copy the string.\n</span><span class=\"kw\">let </span>owned: String = String::from(cow);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>owned[..], <span class=\"string\">\"eggplant\"</span>);</code></pre></div></div></details></div></details>","From<Cow<'a, str>>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cchar%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#3490\">Source</a></span><a href=\"#impl-From%3Cchar%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.char.html\">char</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#3500\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(c: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.char.html\">char</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Allocates an owned <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\"><code>String</code></a> from a single character.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>c: char = <span class=\"string\">'a'</span>;\n<span class=\"kw\">let </span>s: String = String::from(c);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"a\"</span>, <span class=\"kw-2\">&amp;</span>s[..]);</code></pre></div></div></details></div></details>","From<char>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C%26char%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2323\">Source</a></span><a href=\"#impl-FromIterator%3C%26char%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.char.html\">char</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2324\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.char.html\">char</a>&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<&'a char>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C%26str%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2333\">Source</a></span><a href=\"#impl-FromIterator%3C%26str%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2334\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<&'a str>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CBox%3Cstr,+A%3E%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2362\">Source</a></span><a href=\"#impl-FromIterator%3CBox%3Cstr,+A%3E%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2363\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>, A&gt;&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<Box<str, A>>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CCow%3C'a,+str%3E%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.19.0\">1.19.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2372\">Source</a></span><a href=\"#impl-FromIterator%3CCow%3C'a,+str%3E%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2373\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>&gt;&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<Cow<'a, str>>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CString%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2343\">Source</a></span><a href=\"#impl-FromIterator%3CString%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2344\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<String>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3Cchar%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2313\">Source</a></span><a href=\"#impl-FromIterator%3Cchar%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.char.html\">char</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2314\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.char.html\">char</a>&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<char>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2753\">Source</a></span><a href=\"#impl-FromStr-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2754\">Source</a><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.91.0/core/str/traits/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2756\">Source</a><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/str/traits/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.91.0/core/str/traits/trait.FromStr.html#associatedtype.Err\" title=\"type core::str::traits::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"https://doc.rust-lang.org/1.91.0/core/str/traits/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2630\">Source</a></span><a href=\"#impl-Hash-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2632\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, hasher: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.91.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.91.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.91.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.91.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IdentFragment-for-String\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/quote/1.0.40/src/quote/ident_fragment.rs.html#87\">Source</a><a href=\"#impl-IdentFragment-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/quote/1.0.40/quote/ident_fragment/trait.IdentFragment.html\" title=\"trait quote::ident_fragment::IdentFragment\">IdentFragment</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/quote/1.0.40/src/quote/ident_fragment.rs.html#87\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/quote/1.0.40/quote/ident_fragment/trait.IdentFragment.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Format this value as an identifier fragment.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.span\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/quote/1.0.40/src/quote/ident_fragment.rs.html#20\">Source</a><a href=\"#method.span\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/quote/1.0.40/quote/ident_fragment/trait.IdentFragment.html#method.span\" class=\"fn\">span</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://docs.rs/proc-macro2/1.0.101/proc_macro2/struct.Span.html\" title=\"struct proc_macro2::Span\">Span</a>&gt;</h4></section></summary><div class='docblock'>Span associated with this <code>IdentFragment</code>. <a href=\"https://docs.rs/quote/1.0.40/quote/ident_fragment/trait.IdentFragment.html#method.span\">Read more</a></div></details></div></details>","IdentFragment","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CI%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2699-2701\">Source</a></span><a href=\"#impl-Index%3CI%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;I&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2703\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.91.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.91.0/core/slice/index/trait.SliceIndex.html#associatedtype.Output\" title=\"type core::slice::index::SliceIndex::Output\">Output</a></h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2706\">Source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: I) -&gt; &amp;&lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.91.0/core/slice/index/trait.SliceIndex.html#associatedtype.Output\" title=\"type core::slice::index::SliceIndex::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.91.0/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<I>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CI%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2712-2714\">Source</a></span><a href=\"#impl-IndexMut%3CI%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;I&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2717\">Source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: I) -&gt; &amp;mut &lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.91.0/core/slice/index/trait.SliceIndex.html#associatedtype.Output\" title=\"type core::slice::index::SliceIndex::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.91.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<I>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoDeserializer%3C'de,+E%3E-for-String\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_core/1.0.226/src/serde_core/de/value.rs.html#654-656\">Source</a><a href=\"#impl-IntoDeserializer%3C'de,+E%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, E&gt; <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.226/serde_core/de/trait.IntoDeserializer.html\" title=\"trait serde_core::de::IntoDeserializer\">IntoDeserializer</a>&lt;'de, E&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a><div class=\"where\">where\n    E: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.226/serde_core/de/trait.Error.html\" title=\"trait serde_core::de::Error\">Error</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Deserializer\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_core/1.0.226/src/serde_core/de/value.rs.html#658\">Source</a><a href=\"#associatedtype.Deserializer\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/serde_core/1.0.226/serde_core/de/trait.IntoDeserializer.html#associatedtype.Deserializer\" class=\"associatedtype\">Deserializer</a> = <a class=\"struct\" href=\"https://docs.rs/serde_core/1.0.226/serde_core/de/value/struct.StringDeserializer.html\" title=\"struct serde_core::de::value::StringDeserializer\">StringDeserializer</a>&lt;E&gt;</h4></section></summary><div class='docblock'>The type of the deserializer being converted into.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_deserializer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_core/1.0.226/src/serde_core/de/value.rs.html#660\">Source</a><a href=\"#method.into_deserializer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_core/1.0.226/serde_core/de/trait.IntoDeserializer.html#tymethod.into_deserializer\" class=\"fn\">into_deserializer</a>(self) -&gt; <a class=\"struct\" href=\"https://docs.rs/serde_core/1.0.226/serde_core/de/value/struct.StringDeserializer.html\" title=\"struct serde_core::de::value::StringDeserializer\">StringDeserializer</a>&lt;E&gt;</h4></section></summary><div class='docblock'>Convert this value into a deserializer.</div></details></div></details>","IntoDeserializer<'de, E>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#357\">Source</a></span><a href=\"#impl-Ord-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#357\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/core/cmp.rs.html#1023-1025\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/core/cmp.rs.html#1062-1064\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/core/cmp.rs.html#1088-1090\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26str%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2595\">Source</a></span><a href=\"#impl-PartialEq%3C%26str%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2595\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2595\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a str>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CByteStr%3E-for-String\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/bstr.rs.html#669\">Source</a><a href=\"#impl-PartialEq%3CByteStr%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/core/bstr/struct.ByteStr.html\" title=\"struct core::bstr::ByteStr\">ByteStr</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/bstr.rs.html#669\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/core/bstr/struct.ByteStr.html\" title=\"struct core::bstr::ByteStr\">ByteStr</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<ByteStr>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CByteString%3E-for-String\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/bstr.rs.html#529\">Source</a><a href=\"#impl-PartialEq%3CByteString%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/bstr/struct.ByteString.html\" title=\"struct alloc::bstr::ByteString\">ByteString</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/bstr.rs.html#529\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/bstr/struct.ByteString.html\" title=\"struct alloc::bstr::ByteString\">ByteString</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<ByteString>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CCow%3C'a,+str%3E%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2601\">Source</a></span><a href=\"#impl-PartialEq%3CCow%3C'a,+str%3E%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2601\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2601\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Cow<'a, str>>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CPath%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.91.0\">1.91.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/std/path.rs.html#3434\">Source</a></span><a href=\"#impl-PartialEq%3CPath%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/std/path.rs.html#3436\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Path>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CPathBuf%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.91.0\">1.91.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/std/path.rs.html#2131\">Source</a></span><a href=\"#impl-PartialEq%3CPathBuf%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/std/path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/std/path.rs.html#2133\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/std/path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<PathBuf>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3Cstr%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2594\">Source</a></span><a href=\"#impl-PartialEq%3Cstr%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2594\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2594\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<str>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#357\">Source</a></span><a href=\"#impl-PartialEq-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#357\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#357\">Source</a></span><a href=\"#impl-PartialOrd-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#357\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/core/cmp.rs.html#1399\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/core/cmp.rs.html#1417\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/core/cmp.rs.html#1435\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/core/cmp.rs.html#1453\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-String\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_core/1.0.226/src/serde_core/ser/impls.rs.html#52\">Source</a><a href=\"#impl-Serialize-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.226/serde_core/ser/trait.Serialize.html\" title=\"trait serde_core::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_core/1.0.226/src/serde_core/ser/impls.rs.html#54-56\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_core/1.0.226/serde_core/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.226/serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde_core/1.0.226/serde_core/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde_core::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.226/serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde_core/1.0.226/serde_core/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde_core::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.226/serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde_core/1.0.226/serde_core/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-String\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#422\">Source</a><a href=\"#impl-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.39.0\">1.0.0 (const: 1.39.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#444\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Creates a new empty <code>String</code>.</p>\n<p>Given that the <code>String</code> is empty, this will not allocate any initial\nbuffer. While that means that this initial operation is very\ninexpensive, it may cause excessive allocation later when you add\ndata. If you have an idea of how much data the <code>String</code> will hold,\nconsider the <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#method.with_capacity\" title=\"associated function alloc::string::String::with_capacity\"><code>with_capacity</code></a> method to prevent excessive\nre-allocation.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = String::new();</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#487\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.with_capacity\" class=\"fn\">with_capacity</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Creates a new empty <code>String</code> with at least the specified capacity.</p>\n<p><code>String</code>s have an internal buffer to hold their data. The capacity is\nthe length of that buffer, and can be queried with the <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#method.capacity\" title=\"method alloc::string::String::capacity\"><code>capacity</code></a>\nmethod. This method creates an empty <code>String</code>, but one with an initial\nbuffer that can hold at least <code>capacity</code> bytes. This is useful when you\nmay be appending a bunch of data to the <code>String</code>, reducing the number of\nreallocations it needs to do.</p>\n<p>If the given capacity is <code>0</code>, no allocation will occur, and this method\nis identical to the <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#method.new\" title=\"associated function alloc::string::String::new\"><code>new</code></a> method.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::with_capacity(<span class=\"number\">10</span>);\n\n<span class=\"comment\">// The String contains no chars, even though it has capacity for more\n</span><span class=\"macro\">assert_eq!</span>(s.len(), <span class=\"number\">0</span>);\n\n<span class=\"comment\">// These are all done without reallocating...\n</span><span class=\"kw\">let </span>cap = s.capacity();\n<span class=\"kw\">for _ in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    s.push(<span class=\"string\">'a'</span>);\n}\n\n<span class=\"macro\">assert_eq!</span>(s.capacity(), cap);\n\n<span class=\"comment\">// ...but this may make the string reallocate\n</span>s.push(<span class=\"string\">'a'</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_with_capacity\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#500\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.try_with_capacity\" class=\"fn\">try_with_capacity</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/collections/struct.TryReserveError.html\" title=\"struct alloc::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_with_capacity</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates a new empty <code>String</code> with at least the specified capacity.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns <a href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err</code></a> if the capacity exceeds <code>isize::MAX</code> bytes,\nor if the memory allocator reports failure.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_utf8\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#563\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.from_utf8\" class=\"fn\">from_utf8</a>(vec: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.FromUtf8Error.html\" title=\"struct alloc::string::FromUtf8Error\">FromUtf8Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a vector of bytes to a <code>String</code>.</p>\n<p>A string (<a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\"><code>String</code></a>) is made of bytes (<a href=\"https://doc.rust-lang.org/1.91.0/std/primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>), and a vector of bytes\n(<a href=\"https://doc.rust-lang.org/1.91.0/alloc/vec/struct.Vec.html\" title=\"Vec\"><code>Vec&lt;u8&gt;</code></a>) is made of bytes, so this function converts between the\ntwo. Not all byte slices are valid <code>String</code>s, however: <code>String</code>\nrequires that it is valid UTF-8. <code>from_utf8()</code> checks to ensure that\nthe bytes are valid UTF-8, and then does the conversion.</p>\n<p>If you are sure that the byte slice is valid UTF-8, and you don’t want\nto incur the overhead of the validity check, there is an unsafe version\nof this function, <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#method.from_utf8_unchecked\" title=\"associated function alloc::string::String::from_utf8_unchecked\"><code>from_utf8_unchecked</code></a>, which has the same behavior\nbut skips the check.</p>\n<p>This method will take care to not copy the vector, for efficiency’s\nsake.</p>\n<p>If you need a <a href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\" title=\"&amp;str\"><code>&amp;str</code></a> instead of a <code>String</code>, consider\n<a href=\"https://doc.rust-lang.org/1.91.0/core/str/converts/fn.from_utf8.html\" title=\"fn core::str::converts::from_utf8\"><code>str::from_utf8</code></a>.</p>\n<p>The inverse of this method is <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#method.into_bytes\" title=\"method alloc::string::String::into_bytes\"><code>into_bytes</code></a>.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>Returns <a href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err</code></a> if the slice is not UTF-8 with a description as to why the\nprovided bytes are not UTF-8. The vector you moved in is also included.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// some bytes, in a vector\n</span><span class=\"kw\">let </span>sparkle_heart = <span class=\"macro\">vec!</span>[<span class=\"number\">240</span>, <span class=\"number\">159</span>, <span class=\"number\">146</span>, <span class=\"number\">150</span>];\n\n<span class=\"comment\">// We know these bytes are valid, so we'll use `unwrap()`.\n</span><span class=\"kw\">let </span>sparkle_heart = String::from_utf8(sparkle_heart).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"💖\"</span>, sparkle_heart);</code></pre></div>\n<p>Incorrect bytes:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// some invalid bytes, in a vector\n</span><span class=\"kw\">let </span>sparkle_heart = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">159</span>, <span class=\"number\">146</span>, <span class=\"number\">150</span>];\n\n<span class=\"macro\">assert!</span>(String::from_utf8(sparkle_heart).is_err());</code></pre></div>\n<p>See the docs for <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.FromUtf8Error.html\" title=\"struct alloc::string::FromUtf8Error\"><code>FromUtf8Error</code></a> for more details on what you can do\nwith this error.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_utf8_lossy\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#622\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.from_utf8_lossy\" class=\"fn\">from_utf8_lossy</a>(v: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a slice of bytes to a string, including invalid characters.</p>\n<p>Strings are made of bytes (<a href=\"https://doc.rust-lang.org/1.91.0/std/primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>), and a slice of bytes\n(<a href=\"https://doc.rust-lang.org/1.91.0/std/primitive.slice.html\" title=\"primitive slice\"><code>&amp;[u8]</code></a>) is made of bytes, so this function converts\nbetween the two. Not all byte slices are valid strings, however: strings\nare required to be valid UTF-8. During this conversion,\n<code>from_utf8_lossy()</code> will replace any invalid UTF-8 sequences with\n<a href=\"https://doc.rust-lang.org/1.91.0/core/char/constant.REPLACEMENT_CHARACTER.html\" title=\"constant core::char::REPLACEMENT_CHARACTER\"><code>U+FFFD REPLACEMENT CHARACTER</code></a>, which looks like this: �</p>\n<p>If you are sure that the byte slice is valid UTF-8, and you don’t want\nto incur the overhead of the conversion, there is an unsafe version\nof this function, <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#method.from_utf8_unchecked\" title=\"associated function alloc::string::String::from_utf8_unchecked\"><code>from_utf8_unchecked</code></a>, which has the same behavior\nbut skips the checks.</p>\n<p>This function returns a <a href=\"https://doc.rust-lang.org/1.91.0/alloc/borrow/enum.Cow.html\" title=\"borrow::Cow\"><code>Cow&lt;'a, str&gt;</code></a>. If our byte slice is invalid\nUTF-8, then we need to insert the replacement characters, which will\nchange the size of the string, and hence, require a <code>String</code>. But if\nit’s already valid UTF-8, we don’t need a new allocation. This return\ntype allows us to handle both cases.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// some bytes, in a vector\n</span><span class=\"kw\">let </span>sparkle_heart = <span class=\"macro\">vec!</span>[<span class=\"number\">240</span>, <span class=\"number\">159</span>, <span class=\"number\">146</span>, <span class=\"number\">150</span>];\n\n<span class=\"kw\">let </span>sparkle_heart = String::from_utf8_lossy(<span class=\"kw-2\">&amp;</span>sparkle_heart);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"💖\"</span>, sparkle_heart);</code></pre></div>\n<p>Incorrect bytes:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// some invalid bytes\n</span><span class=\"kw\">let </span>input = <span class=\"string\">b\"Hello \\xF0\\x90\\x80World\"</span>;\n<span class=\"kw\">let </span>output = String::from_utf8_lossy(input);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"Hello �World\"</span>, output);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_utf8_lossy_owned\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#689\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.from_utf8_lossy_owned\" class=\"fn\">from_utf8_lossy_owned</a>(v: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>string_from_utf8_lossy_owned</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts a <a href=\"https://doc.rust-lang.org/1.91.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec&lt;u8&gt;</code></a> to a <code>String</code>, substituting invalid UTF-8\nsequences with replacement characters.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#method.from_utf8_lossy\" title=\"associated function alloc::string::String::from_utf8_lossy\"><code>from_utf8_lossy</code></a> for more details.</p>\n<p>Note that this function does not guarantee reuse of the original <code>Vec</code>\nallocation.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(string_from_utf8_lossy_owned)]\n</span><span class=\"comment\">// some bytes, in a vector\n</span><span class=\"kw\">let </span>sparkle_heart = <span class=\"macro\">vec!</span>[<span class=\"number\">240</span>, <span class=\"number\">159</span>, <span class=\"number\">146</span>, <span class=\"number\">150</span>];\n\n<span class=\"kw\">let </span>sparkle_heart = String::from_utf8_lossy_owned(sparkle_heart);\n\n<span class=\"macro\">assert_eq!</span>(String::from(<span class=\"string\">\"💖\"</span>), sparkle_heart);</code></pre></div>\n<p>Incorrect bytes:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(string_from_utf8_lossy_owned)]\n</span><span class=\"comment\">// some invalid bytes\n</span><span class=\"kw\">let </span>input: Vec&lt;u8&gt; = <span class=\"string\">b\"Hello \\xF0\\x90\\x80World\"</span>.into();\n<span class=\"kw\">let </span>output = String::from_utf8_lossy_owned(input);\n\n<span class=\"macro\">assert_eq!</span>(String::from(<span class=\"string\">\"Hello �World\"</span>), output);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_utf16\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#721\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.from_utf16\" class=\"fn\">from_utf16</a>(v: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.u16.html\">u16</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.FromUtf16Error.html\" title=\"struct alloc::string::FromUtf16Error\">FromUtf16Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Decode a native endian UTF-16–encoded vector <code>v</code> into a <code>String</code>,\nreturning <a href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err</code></a> if <code>v</code> contains any invalid data.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// 𝄞music\n</span><span class=\"kw\">let </span>v = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0xD834</span>, <span class=\"number\">0xDD1E</span>, <span class=\"number\">0x006d</span>, <span class=\"number\">0x0075</span>,\n          <span class=\"number\">0x0073</span>, <span class=\"number\">0x0069</span>, <span class=\"number\">0x0063</span>];\n<span class=\"macro\">assert_eq!</span>(String::from(<span class=\"string\">\"𝄞music\"</span>),\n           String::from_utf16(v).unwrap());\n\n<span class=\"comment\">// 𝄞mu&lt;invalid&gt;ic\n</span><span class=\"kw\">let </span>v = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0xD834</span>, <span class=\"number\">0xDD1E</span>, <span class=\"number\">0x006d</span>, <span class=\"number\">0x0075</span>,\n          <span class=\"number\">0xD800</span>, <span class=\"number\">0x0069</span>, <span class=\"number\">0x0063</span>];\n<span class=\"macro\">assert!</span>(String::from_utf16(v).is_err());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_utf16_lossy\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#761\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.from_utf16_lossy\" class=\"fn\">from_utf16_lossy</a>(v: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.u16.html\">u16</a>]) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Decode a native endian UTF-16–encoded slice <code>v</code> into a <code>String</code>,\nreplacing invalid data with <a href=\"https://doc.rust-lang.org/1.91.0/core/char/constant.REPLACEMENT_CHARACTER.html\" title=\"constant core::char::REPLACEMENT_CHARACTER\">the replacement character (<code>U+FFFD</code>)</a>.</p>\n<p>Unlike <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#method.from_utf8_lossy\" title=\"associated function alloc::string::String::from_utf8_lossy\"><code>from_utf8_lossy</code></a> which returns a <a href=\"https://doc.rust-lang.org/1.91.0/alloc/borrow/enum.Cow.html\" title=\"borrow::Cow\"><code>Cow&lt;'a, str&gt;</code></a>,\n<code>from_utf16_lossy</code> returns a <code>String</code> since the UTF-16 to UTF-8\nconversion requires a memory allocation.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// 𝄞mus&lt;invalid&gt;ic&lt;invalid&gt;\n</span><span class=\"kw\">let </span>v = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0xD834</span>, <span class=\"number\">0xDD1E</span>, <span class=\"number\">0x006d</span>, <span class=\"number\">0x0075</span>,\n          <span class=\"number\">0x0073</span>, <span class=\"number\">0xDD1E</span>, <span class=\"number\">0x0069</span>, <span class=\"number\">0x0063</span>,\n          <span class=\"number\">0xD834</span>];\n\n<span class=\"macro\">assert_eq!</span>(String::from(<span class=\"string\">\"𝄞mus\\u{FFFD}ic\\u{FFFD}\"</span>),\n           String::from_utf16_lossy(v));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_utf16le\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#789\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.from_utf16le\" class=\"fn\">from_utf16le</a>(v: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.FromUtf16Error.html\" title=\"struct alloc::string::FromUtf16Error\">FromUtf16Error</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>str_from_utf16_endian</code>)</span></div></span></summary><div class=\"docblock\"><p>Decode a UTF-16LE–encoded vector <code>v</code> into a <code>String</code>,\nreturning <a href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err</code></a> if <code>v</code> contains any invalid data.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(str_from_utf16_endian)]\n</span><span class=\"comment\">// 𝄞music\n</span><span class=\"kw\">let </span>v = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0x34</span>, <span class=\"number\">0xD8</span>, <span class=\"number\">0x1E</span>, <span class=\"number\">0xDD</span>, <span class=\"number\">0x6d</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x75</span>, <span class=\"number\">0x00</span>,\n          <span class=\"number\">0x73</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x69</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x63</span>, <span class=\"number\">0x00</span>];\n<span class=\"macro\">assert_eq!</span>(String::from(<span class=\"string\">\"𝄞music\"</span>),\n           String::from_utf16le(v).unwrap());\n\n<span class=\"comment\">// 𝄞mu&lt;invalid&gt;ic\n</span><span class=\"kw\">let </span>v = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0x34</span>, <span class=\"number\">0xD8</span>, <span class=\"number\">0x1E</span>, <span class=\"number\">0xDD</span>, <span class=\"number\">0x6d</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x75</span>, <span class=\"number\">0x00</span>,\n          <span class=\"number\">0x00</span>, <span class=\"number\">0xD8</span>, <span class=\"number\">0x69</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x63</span>, <span class=\"number\">0x00</span>];\n<span class=\"macro\">assert!</span>(String::from_utf16le(v).is_err());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_utf16le_lossy\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#828\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.from_utf16le_lossy\" class=\"fn\">from_utf16le_lossy</a>(v: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>str_from_utf16_endian</code>)</span></div></span></summary><div class=\"docblock\"><p>Decode a UTF-16LE–encoded slice <code>v</code> into a <code>String</code>, replacing\ninvalid data with <a href=\"https://doc.rust-lang.org/1.91.0/core/char/constant.REPLACEMENT_CHARACTER.html\" title=\"constant core::char::REPLACEMENT_CHARACTER\">the replacement character (<code>U+FFFD</code>)</a>.</p>\n<p>Unlike <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#method.from_utf8_lossy\" title=\"associated function alloc::string::String::from_utf8_lossy\"><code>from_utf8_lossy</code></a> which returns a <a href=\"https://doc.rust-lang.org/1.91.0/alloc/borrow/enum.Cow.html\" title=\"borrow::Cow\"><code>Cow&lt;'a, str&gt;</code></a>,\n<code>from_utf16le_lossy</code> returns a <code>String</code> since the UTF-16 to UTF-8\nconversion requires a memory allocation.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(str_from_utf16_endian)]\n</span><span class=\"comment\">// 𝄞mus&lt;invalid&gt;ic&lt;invalid&gt;\n</span><span class=\"kw\">let </span>v = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0x34</span>, <span class=\"number\">0xD8</span>, <span class=\"number\">0x1E</span>, <span class=\"number\">0xDD</span>, <span class=\"number\">0x6d</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x75</span>, <span class=\"number\">0x00</span>,\n          <span class=\"number\">0x73</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x1E</span>, <span class=\"number\">0xDD</span>, <span class=\"number\">0x69</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x63</span>, <span class=\"number\">0x00</span>,\n          <span class=\"number\">0x34</span>, <span class=\"number\">0xD8</span>];\n\n<span class=\"macro\">assert_eq!</span>(String::from(<span class=\"string\">\"𝄞mus\\u{FFFD}ic\\u{FFFD}\"</span>),\n           String::from_utf16le_lossy(v));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_utf16be\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#864\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.from_utf16be\" class=\"fn\">from_utf16be</a>(v: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.FromUtf16Error.html\" title=\"struct alloc::string::FromUtf16Error\">FromUtf16Error</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>str_from_utf16_endian</code>)</span></div></span></summary><div class=\"docblock\"><p>Decode a UTF-16BE–encoded vector <code>v</code> into a <code>String</code>,\nreturning <a href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err</code></a> if <code>v</code> contains any invalid data.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(str_from_utf16_endian)]\n</span><span class=\"comment\">// 𝄞music\n</span><span class=\"kw\">let </span>v = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0xD8</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0xDD</span>, <span class=\"number\">0x1E</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x6d</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x75</span>,\n          <span class=\"number\">0x00</span>, <span class=\"number\">0x73</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x69</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x63</span>];\n<span class=\"macro\">assert_eq!</span>(String::from(<span class=\"string\">\"𝄞music\"</span>),\n           String::from_utf16be(v).unwrap());\n\n<span class=\"comment\">// 𝄞mu&lt;invalid&gt;ic\n</span><span class=\"kw\">let </span>v = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0xD8</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0xDD</span>, <span class=\"number\">0x1E</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x6d</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x75</span>,\n          <span class=\"number\">0xD8</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x69</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x63</span>];\n<span class=\"macro\">assert!</span>(String::from_utf16be(v).is_err());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_utf16be_lossy\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#903\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.from_utf16be_lossy\" class=\"fn\">from_utf16be_lossy</a>(v: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>str_from_utf16_endian</code>)</span></div></span></summary><div class=\"docblock\"><p>Decode a UTF-16BE–encoded slice <code>v</code> into a <code>String</code>, replacing\ninvalid data with <a href=\"https://doc.rust-lang.org/1.91.0/core/char/constant.REPLACEMENT_CHARACTER.html\" title=\"constant core::char::REPLACEMENT_CHARACTER\">the replacement character (<code>U+FFFD</code>)</a>.</p>\n<p>Unlike <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#method.from_utf8_lossy\" title=\"associated function alloc::string::String::from_utf8_lossy\"><code>from_utf8_lossy</code></a> which returns a <a href=\"https://doc.rust-lang.org/1.91.0/alloc/borrow/enum.Cow.html\" title=\"borrow::Cow\"><code>Cow&lt;'a, str&gt;</code></a>,\n<code>from_utf16le_lossy</code> returns a <code>String</code> since the UTF-16 to UTF-8\nconversion requires a memory allocation.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(str_from_utf16_endian)]\n</span><span class=\"comment\">// 𝄞mus&lt;invalid&gt;ic&lt;invalid&gt;\n</span><span class=\"kw\">let </span>v = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0xD8</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0xDD</span>, <span class=\"number\">0x1E</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x6d</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x75</span>,\n          <span class=\"number\">0x00</span>, <span class=\"number\">0x73</span>, <span class=\"number\">0xDD</span>, <span class=\"number\">0x1E</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x69</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x63</span>,\n          <span class=\"number\">0xD8</span>, <span class=\"number\">0x34</span>];\n\n<span class=\"macro\">assert_eq!</span>(String::from(<span class=\"string\">\"𝄞mus\\u{FFFD}ic\\u{FFFD}\"</span>),\n           String::from_utf16be_lossy(v));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw_parts\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#945\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.into_raw_parts\" class=\"fn\">into_raw_parts</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.u8.html\">u8</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_into_raw_parts</code>)</span></div></span></summary><div class=\"docblock\"><p>Decomposes a <code>String</code> into its raw components: <code>(pointer, length, capacity)</code>.</p>\n<p>Returns the raw pointer to the underlying data, the length of\nthe string (in bytes), and the allocated capacity of the data\n(in bytes). These are the same arguments in the same order as\nthe arguments to <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#method.from_raw_parts\" title=\"associated function alloc::string::String::from_raw_parts\"><code>from_raw_parts</code></a>.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>String</code>. The only way to do\nthis is to convert the raw pointer, length, and capacity back\ninto a <code>String</code> with the <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#method.from_raw_parts\" title=\"associated function alloc::string::String::from_raw_parts\"><code>from_raw_parts</code></a> function, allowing\nthe destructor to perform the cleanup.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_into_raw_parts)]\n</span><span class=\"kw\">let </span>s = String::from(<span class=\"string\">\"hello\"</span>);\n\n<span class=\"kw\">let </span>(ptr, len, cap) = s.into_raw_parts();\n\n<span class=\"kw\">let </span>rebuilt = <span class=\"kw\">unsafe </span>{ String::from_raw_parts(ptr, len, cap) };\n<span class=\"macro\">assert_eq!</span>(rebuilt, <span class=\"string\">\"hello\"</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw_parts\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#994\">Source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.from_raw_parts\" class=\"fn\">from_raw_parts</a>(\n    buf: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.u8.html\">u8</a>,\n    length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>String</code> from a pointer, a length and a capacity.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This is highly unsafe, due to the number of invariants that aren’t\nchecked:</p>\n<ul>\n<li>all safety requirements for <a href=\"https://doc.rust-lang.org/1.91.0/alloc/vec/struct.Vec.html#method.from_raw_parts\" title=\"associated function alloc::vec::Vec::from_raw_parts\"><code>Vec::&lt;u8&gt;::from_raw_parts</code></a>.</li>\n<li>all safety requirements for <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#method.from_utf8_unchecked\" title=\"associated function alloc::string::String::from_utf8_unchecked\"><code>String::from_utf8_unchecked</code></a>.</li>\n</ul>\n<p>Violating these may cause problems like corrupting the allocator’s\ninternal data structures. For example, it is normally <strong>not</strong> safe to\nbuild a <code>String</code> from a pointer to a C <code>char</code> array containing UTF-8\n<em>unless</em> you are certain that array was originally allocated by the\nRust standard library’s allocator.</p>\n<p>The ownership of <code>buf</code> is effectively transferred to the\n<code>String</code> which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>s = String::from(<span class=\"string\">\"hello\"</span>);\n\n    <span class=\"comment\">// Prevent automatically dropping the String's data\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = mem::ManuallyDrop::new(s);\n\n    <span class=\"kw\">let </span>ptr = s.as_mut_ptr();\n    <span class=\"kw\">let </span>len = s.len();\n    <span class=\"kw\">let </span>capacity = s.capacity();\n\n    <span class=\"kw\">let </span>s = String::from_raw_parts(ptr, len, capacity);\n\n    <span class=\"macro\">assert_eq!</span>(String::from(<span class=\"string\">\"hello\"</span>), s);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_utf8_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#1027\">Source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.from_utf8_unchecked\" class=\"fn\">from_utf8_unchecked</a>(bytes: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Converts a vector of bytes to a <code>String</code> without checking that the\nstring contains valid UTF-8.</p>\n<p>See the safe version, <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#method.from_utf8\" title=\"associated function alloc::string::String::from_utf8\"><code>from_utf8</code></a>, for more details.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>This function is unsafe because it does not check that the bytes passed\nto it are valid UTF-8. If this constraint is violated, it may cause\nmemory unsafety issues with future users of the <code>String</code>, as the rest of\nthe standard library assumes that <code>String</code>s are valid UTF-8.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// some bytes, in a vector\n</span><span class=\"kw\">let </span>sparkle_heart = <span class=\"macro\">vec!</span>[<span class=\"number\">240</span>, <span class=\"number\">159</span>, <span class=\"number\">146</span>, <span class=\"number\">150</span>];\n\n<span class=\"kw\">let </span>sparkle_heart = <span class=\"kw\">unsafe </span>{\n    String::from_utf8_unchecked(sparkle_heart)\n};\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"💖\"</span>, sparkle_heart);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.87.0\">1.0.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#1048\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.into_bytes\" class=\"fn\">into_bytes</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>String</code> into a byte vector.</p>\n<p>This consumes the <code>String</code>, so we do not need to copy its contents.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = String::from(<span class=\"string\">\"hello\"</span>);\n<span class=\"kw\">let </span>bytes = s.into_bytes();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">104</span>, <span class=\"number\">101</span>, <span class=\"number\">108</span>, <span class=\"number\">108</span>, <span class=\"number\">111</span>][..], <span class=\"kw-2\">&amp;</span>bytes[..]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_str\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.87.0\">1.7.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#1066\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.as_str\" class=\"fn\">as_str</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Extracts a string slice containing the entire <code>String</code>.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = String::from(<span class=\"string\">\"foo\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"foo\"</span>, s.as_str());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_str\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.87.0\">1.7.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#1089\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.as_mut_str\" class=\"fn\">as_mut_str</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code>String</code> into a mutable string slice.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::from(<span class=\"string\">\"foobar\"</span>);\n<span class=\"kw\">let </span>s_mut_str = s.as_mut_str();\n\ns_mut_str.make_ascii_uppercase();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"FOOBAR\"</span>, s_mut_str);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_str\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#1112\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.push_str\" class=\"fn\">push_str</a>(&amp;mut self, string: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>)</h4></section></summary><div class=\"docblock\"><p>Appends a given string slice onto the end of this <code>String</code>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::from(<span class=\"string\">\"foo\"</span>);\n\ns.push_str(<span class=\"string\">\"bar\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"foobar\"</span>, s);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_from_within\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.87.0\">1.87.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#1140-1142\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.extend_from_within\" class=\"fn\">extend_from_within</a>&lt;R&gt;(&amp;mut self, src: R)<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Copies elements from <code>src</code> range to the end of the string.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the starting point or end point do not lie on a <a href=\"https://doc.rust-lang.org/1.91.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>\nboundary, or if they’re out of bounds.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>string = String::from(<span class=\"string\">\"abcde\"</span>);\n\nstring.extend_from_within(<span class=\"number\">2</span>..);\n<span class=\"macro\">assert_eq!</span>(string, <span class=\"string\">\"abcdecde\"</span>);\n\nstring.extend_from_within(..<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(string, <span class=\"string\">\"abcdecdeab\"</span>);\n\nstring.extend_from_within(<span class=\"number\">4</span>..<span class=\"number\">8</span>);\n<span class=\"macro\">assert_eq!</span>(string, <span class=\"string\">\"abcdecdeabecde\"</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.87.0\">1.0.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#1165\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns this <code>String</code>’s capacity, in bytes.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = String::with_capacity(<span class=\"number\">10</span>);\n\n<span class=\"macro\">assert!</span>(s.capacity() &gt;= <span class=\"number\">10</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#1213\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.reserve\" class=\"fn\">reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves capacity for at least <code>additional</code> bytes more than the\ncurrent length. The allocator may reserve more space to speculatively\navoid frequent allocations. After calling <code>reserve</code>,\ncapacity will be greater than or equal to <code>self.len() + additional</code>.\nDoes nothing if capacity is already sufficient.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the new capacity overflows <a href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\" title=\"primitive usize\"><code>usize</code></a>.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::new();\n\ns.reserve(<span class=\"number\">10</span>);\n\n<span class=\"macro\">assert!</span>(s.capacity() &gt;= <span class=\"number\">10</span>);</code></pre></div>\n<p>This might not actually increase the capacity:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::with_capacity(<span class=\"number\">10</span>);\ns.push(<span class=\"string\">'a'</span>);\ns.push(<span class=\"string\">'b'</span>);\n\n<span class=\"comment\">// s now has a length of 2 and a capacity of at least 10\n</span><span class=\"kw\">let </span>capacity = s.capacity();\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">2</span>, s.len());\n<span class=\"macro\">assert!</span>(capacity &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// Since we already have at least an extra 8 capacity, calling this...\n</span>s.reserve(<span class=\"number\">8</span>);\n\n<span class=\"comment\">// ... doesn't actually increase.\n</span><span class=\"macro\">assert_eq!</span>(capacity, s.capacity());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve_exact\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#1264\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.reserve_exact\" class=\"fn\">reserve_exact</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves the minimum capacity for at least <code>additional</code> bytes more than\nthe current length. Unlike <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#method.reserve\" title=\"method alloc::string::String::reserve\"><code>reserve</code></a>, this will not\ndeliberately over-allocate to speculatively avoid frequent allocations.\nAfter calling <code>reserve_exact</code>, capacity will be greater than or equal to\n<code>self.len() + additional</code>. Does nothing if the capacity is already\nsufficient.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if the new capacity overflows <a href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\" title=\"primitive usize\"><code>usize</code></a>.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::new();\n\ns.reserve_exact(<span class=\"number\">10</span>);\n\n<span class=\"macro\">assert!</span>(s.capacity() &gt;= <span class=\"number\">10</span>);</code></pre></div>\n<p>This might not actually increase the capacity:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::with_capacity(<span class=\"number\">10</span>);\ns.push(<span class=\"string\">'a'</span>);\ns.push(<span class=\"string\">'b'</span>);\n\n<span class=\"comment\">// s now has a length of 2 and a capacity of at least 10\n</span><span class=\"kw\">let </span>capacity = s.capacity();\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">2</span>, s.len());\n<span class=\"macro\">assert!</span>(capacity &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// Since we already have at least an extra 8 capacity, calling this...\n</span>s.reserve_exact(<span class=\"number\">8</span>);\n\n<span class=\"comment\">// ... doesn't actually increase.\n</span><span class=\"macro\">assert_eq!</span>(capacity, s.capacity());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_reserve\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#1299\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.try_reserve\" class=\"fn\">try_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/collections/struct.TryReserveError.html\" title=\"struct alloc::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to reserve capacity for at least <code>additional</code> bytes more than the\ncurrent length. The allocator may reserve more space to speculatively\navoid frequent allocations. After calling <code>try_reserve</code>, capacity will be\ngreater than or equal to <code>self.len() + additional</code> if it returns\n<code>Ok(())</code>. Does nothing if capacity is already sufficient. This method\npreserves the contents even if an error occurs.</p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">§</a>Errors</h5>\n<p>If the capacity overflows, or the allocator reports a failure, then an error\nis returned.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::TryReserveError;\n\n<span class=\"kw\">fn </span>process_data(data: <span class=\"kw-2\">&amp;</span>str) -&gt; <span class=\"prelude-ty\">Result</span>&lt;String, TryReserveError&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>output = String::new();\n\n    <span class=\"comment\">// Pre-reserve the memory, exiting if we can't\n    </span>output.try_reserve(data.len())<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// Now we know this can't OOM in the middle of our complex work\n    </span>output.push_str(data);\n\n    <span class=\"prelude-val\">Ok</span>(output)\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_reserve_exact\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#1340\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.try_reserve_exact\" class=\"fn\">try_reserve_exact</a>(\n    &amp;mut self,\n    additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/collections/struct.TryReserveError.html\" title=\"struct alloc::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to reserve the minimum capacity for at least <code>additional</code> bytes\nmore than the current length. Unlike <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#method.try_reserve\" title=\"method alloc::string::String::try_reserve\"><code>try_reserve</code></a>, this will not\ndeliberately over-allocate to speculatively avoid frequent allocations.\nAfter calling <code>try_reserve_exact</code>, capacity will be greater than or\nequal to <code>self.len() + additional</code> if it returns <code>Ok(())</code>.\nDoes nothing if the capacity is already sufficient.</p>\n<p>Note that the allocator may give the collection more space than it\nrequests. Therefore, capacity can not be relied upon to be precisely\nminimal. Prefer <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#method.try_reserve\" title=\"method alloc::string::String::try_reserve\"><code>try_reserve</code></a> if future insertions are expected.</p>\n<h5 id=\"errors-3\"><a class=\"doc-anchor\" href=\"#errors-3\">§</a>Errors</h5>\n<p>If the capacity overflows, or the allocator reports a failure, then an error\nis returned.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::TryReserveError;\n\n<span class=\"kw\">fn </span>process_data(data: <span class=\"kw-2\">&amp;</span>str) -&gt; <span class=\"prelude-ty\">Result</span>&lt;String, TryReserveError&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>output = String::new();\n\n    <span class=\"comment\">// Pre-reserve the memory, exiting if we can't\n    </span>output.try_reserve_exact(data.len())<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// Now we know this can't OOM in the middle of our complex work\n    </span>output.push_str(data);\n\n    <span class=\"prelude-val\">Ok</span>(output)\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to_fit\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#1361\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.shrink_to_fit\" class=\"fn\">shrink_to_fit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of this <code>String</code> to match its length.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::from(<span class=\"string\">\"foo\"</span>);\n\ns.reserve(<span class=\"number\">100</span>);\n<span class=\"macro\">assert!</span>(s.capacity() &gt;= <span class=\"number\">100</span>);\n\ns.shrink_to_fit();\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3</span>, s.capacity());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.56.0\">1.56.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#1389\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.shrink_to\" class=\"fn\">shrink_to</a>(&amp;mut self, min_capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of this <code>String</code> with a lower bound.</p>\n<p>The capacity will remain at least as large as both the length\nand the supplied value.</p>\n<p>If the current capacity is less than the lower limit, this is a no-op.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::from(<span class=\"string\">\"foo\"</span>);\n\ns.reserve(<span class=\"number\">100</span>);\n<span class=\"macro\">assert!</span>(s.capacity() &gt;= <span class=\"number\">100</span>);\n\ns.shrink_to(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(s.capacity() &gt;= <span class=\"number\">10</span>);\ns.shrink_to(<span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(s.capacity() &gt;= <span class=\"number\">3</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#1410\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.push\" class=\"fn\">push</a>(&amp;mut self, ch: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.char.html\">char</a>)</h4></section></summary><div class=\"docblock\"><p>Appends the given <a href=\"https://doc.rust-lang.org/1.91.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> to the end of this <code>String</code>.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::from(<span class=\"string\">\"abc\"</span>);\n\ns.push(<span class=\"string\">'1'</span>);\ns.push(<span class=\"string\">'2'</span>);\ns.push(<span class=\"string\">'3'</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"abc123\"</span>, s);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.87.0\">1.0.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#1439\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.as_bytes\" class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns a byte slice of this <code>String</code>’s contents.</p>\n<p>The inverse of this method is <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#method.from_utf8\" title=\"associated function alloc::string::String::from_utf8\"><code>from_utf8</code></a>.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = String::from(<span class=\"string\">\"hello\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">104</span>, <span class=\"number\">101</span>, <span class=\"number\">108</span>, <span class=\"number\">108</span>, <span class=\"number\">111</span>], s.as_bytes());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.truncate\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#1467\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.truncate\" class=\"fn\">truncate</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shortens this <code>String</code> to the specified length.</p>\n<p>If <code>new_len</code> is greater than or equal to the string’s current length, this has no\neffect.</p>\n<p>Note that this method has no effect on the allocated capacity\nof the string</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if <code>new_len</code> does not lie on a <a href=\"https://doc.rust-lang.org/1.91.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> boundary.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::from(<span class=\"string\">\"hello\"</span>);\n\ns.truncate(<span class=\"number\">2</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"he\"</span>, s);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#1491\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.pop\" class=\"fn\">pop</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.char.html\">char</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Removes the last character from the string buffer and returns it.</p>\n<p>Returns <a href=\"https://doc.rust-lang.org/1.91.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if this <code>String</code> is empty.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::from(<span class=\"string\">\"abč\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(s.pop(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">'č'</span>));\n<span class=\"macro\">assert_eq!</span>(s.pop(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">'b'</span>));\n<span class=\"macro\">assert_eq!</span>(s.pop(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">'a'</span>));\n\n<span class=\"macro\">assert_eq!</span>(s.pop(), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#1524\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.remove\" class=\"fn\">remove</a>(&amp;mut self, idx: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.char.html\">char</a></h4></section></summary><div class=\"docblock\"><p>Removes a <a href=\"https://doc.rust-lang.org/1.91.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> from this <code>String</code> at byte position <code>idx</code> and returns it.</p>\n<p>Copies all bytes after the removed char to new positions.</p>\n<p>Note that calling this in a loop can result in quadratic behavior.</p>\n<h5 id=\"panics-4\"><a class=\"doc-anchor\" href=\"#panics-4\">§</a>Panics</h5>\n<p>Panics if <code>idx</code> is larger than or equal to the <code>String</code>’s length,\nor if it does not lie on a <a href=\"https://doc.rust-lang.org/1.91.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> boundary.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::from(<span class=\"string\">\"abç\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(s.remove(<span class=\"number\">0</span>), <span class=\"string\">'a'</span>);\n<span class=\"macro\">assert_eq!</span>(s.remove(<span class=\"number\">1</span>), <span class=\"string\">'ç'</span>);\n<span class=\"macro\">assert_eq!</span>(s.remove(<span class=\"number\">0</span>), <span class=\"string\">'b'</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_matches\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#1561\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.remove_matches\" class=\"fn\">remove_matches</a>&lt;P&gt;(&amp;mut self, pat: P)<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/str/pattern/trait.Pattern.html\" title=\"trait core::str::pattern::Pattern\">Pattern</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>string_remove_matches</code>)</span></div></span></summary><div class=\"docblock\"><p>Remove all matches of pattern <code>pat</code> in the <code>String</code>.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(string_remove_matches)]\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::from(<span class=\"string\">\"Trees are not green, the sky is not blue.\"</span>);\ns.remove_matches(<span class=\"string\">\"not \"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"Trees are green, the sky is blue.\"</span>, s);</code></pre></div>\n<p>Matches will be detected and removed iteratively, so in cases where\npatterns overlap, only the first pattern will be removed:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(string_remove_matches)]\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::from(<span class=\"string\">\"banana\"</span>);\ns.remove_matches(<span class=\"string\">\"ana\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"bna\"</span>, s);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0\">1.26.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#1638-1640\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.retain\" class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.char.html\">char</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the characters specified by the predicate.</p>\n<p>In other words, remove all characters <code>c</code> such that <code>f(c)</code> returns <code>false</code>.\nThis method operates in place, visiting each character exactly once in the\noriginal order, and preserves the order of the retained characters.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::from(<span class=\"string\">\"f_o_ob_ar\"</span>);\n\ns.retain(|c| c != <span class=\"string\">'_'</span>);\n\n<span class=\"macro\">assert_eq!</span>(s, <span class=\"string\">\"foobar\"</span>);</code></pre></div>\n<p>Because the elements are visited exactly once in the original order,\nexternal state may be used to decide which elements to keep.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::from(<span class=\"string\">\"abcde\"</span>);\n<span class=\"kw\">let </span>keep = [<span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = keep.iter();\ns.retain(|<span class=\"kw\">_</span>| <span class=\"kw-2\">*</span>iter.next().unwrap());\n<span class=\"macro\">assert_eq!</span>(s, <span class=\"string\">\"bce\"</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#1720\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, idx: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>, ch: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.char.html\">char</a>)</h4></section></summary><div class=\"docblock\"><p>Inserts a character into this <code>String</code> at byte position <code>idx</code>.</p>\n<p>Reallocates if <code>self.capacity()</code> is insufficient, which may involve copying all\n<code>self.capacity()</code> bytes. Makes space for the insertion by copying all bytes of\n<code>&amp;self[idx..]</code> to new positions.</p>\n<p>Note that calling this in a loop can result in quadratic behavior.</p>\n<h5 id=\"panics-5\"><a class=\"doc-anchor\" href=\"#panics-5\">§</a>Panics</h5>\n<p>Panics if <code>idx</code> is larger than the <code>String</code>’s length, or if it does not\nlie on a <a href=\"https://doc.rust-lang.org/1.91.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> boundary.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::with_capacity(<span class=\"number\">3</span>);\n\ns.insert(<span class=\"number\">0</span>, <span class=\"string\">'f'</span>);\ns.insert(<span class=\"number\">1</span>, <span class=\"string\">'o'</span>);\ns.insert(<span class=\"number\">2</span>, <span class=\"string\">'o'</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"foo\"</span>, s);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_str\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#1777\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.insert_str\" class=\"fn\">insert_str</a>(&amp;mut self, idx: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>, string: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>)</h4></section></summary><div class=\"docblock\"><p>Inserts a string slice into this <code>String</code> at byte position <code>idx</code>.</p>\n<p>Reallocates if <code>self.capacity()</code> is insufficient, which may involve copying all\n<code>self.capacity()</code> bytes. Makes space for the insertion by copying all bytes of\n<code>&amp;self[idx..]</code> to new positions.</p>\n<p>Note that calling this in a loop can result in quadratic behavior.</p>\n<h5 id=\"panics-6\"><a class=\"doc-anchor\" href=\"#panics-6\">§</a>Panics</h5>\n<p>Panics if <code>idx</code> is larger than the <code>String</code>’s length, or if it does not\nlie on a <a href=\"https://doc.rust-lang.org/1.91.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> boundary.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::from(<span class=\"string\">\"bar\"</span>);\n\ns.insert_str(<span class=\"number\">0</span>, <span class=\"string\">\"foo\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"foobar\"</span>, s);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_vec\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.87.0\">1.0.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#1830\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.as_mut_vec\" class=\"fn\">as_mut_vec</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the contents of this <code>String</code>.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<p>This function is unsafe because the returned <code>&amp;mut Vec</code> allows writing\nbytes which are not valid UTF-8. If this constraint is violated, using\nthe original <code>String</code> after dropping the <code>&amp;mut Vec</code> may violate memory\nsafety, as the rest of the standard library assumes that <code>String</code>s are\nvalid UTF-8.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::from(<span class=\"string\">\"hello\"</span>);\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>vec = s.as_mut_vec();\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">104</span>, <span class=\"number\">101</span>, <span class=\"number\">108</span>, <span class=\"number\">108</span>, <span class=\"number\">111</span>][..], <span class=\"kw-2\">&amp;</span>vec[..]);\n\n    vec.reverse();\n}\n<span class=\"macro\">assert_eq!</span>(s, <span class=\"string\">\"olleh\"</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.87.0\">1.0.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#1854\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the length of this <code>String</code>, in bytes, not <a href=\"https://doc.rust-lang.org/1.91.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s or\ngraphemes. In other words, it might not be what a human considers the\nlength of the string.</p>\n<h5 id=\"examples-36\"><a class=\"doc-anchor\" href=\"#examples-36\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = String::from(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(a.len(), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>fancy_f = String::from(<span class=\"string\">\"ƒoo\"</span>);\n<span class=\"macro\">assert_eq!</span>(fancy_f.len(), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(fancy_f.chars().count(), <span class=\"number\">3</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.87.0\">1.0.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#1874\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this <code>String</code> has a length of zero, and <code>false</code> otherwise.</p>\n<h5 id=\"examples-37\"><a class=\"doc-anchor\" href=\"#examples-37\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = String::new();\n<span class=\"macro\">assert!</span>(v.is_empty());\n\nv.push(<span class=\"string\">'a'</span>);\n<span class=\"macro\">assert!</span>(!v.is_empty());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_off\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#1906\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.split_off\" class=\"fn\">split_off</a>(&amp;mut self, at: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Splits the string into two at the given byte index.</p>\n<p>Returns a newly allocated <code>String</code>. <code>self</code> contains bytes <code>[0, at)</code>, and\nthe returned <code>String</code> contains bytes <code>[at, len)</code>. <code>at</code> must be on the\nboundary of a UTF-8 code point.</p>\n<p>Note that the capacity of <code>self</code> does not change.</p>\n<h5 id=\"panics-7\"><a class=\"doc-anchor\" href=\"#panics-7\">§</a>Panics</h5>\n<p>Panics if <code>at</code> is not on a <code>UTF-8</code> code point boundary, or if it is beyond the last\ncode point of the string.</p>\n<h5 id=\"examples-38\"><a class=\"doc-anchor\" href=\"#examples-38\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>hello = String::from(<span class=\"string\">\"Hello, World!\"</span>);\n<span class=\"kw\">let </span>world = hello.split_off(<span class=\"number\">7</span>);\n<span class=\"macro\">assert_eq!</span>(hello, <span class=\"string\">\"Hello, \"</span>);\n<span class=\"macro\">assert_eq!</span>(world, <span class=\"string\">\"World!\"</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#1930\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Truncates this <code>String</code>, removing all contents.</p>\n<p>While this means the <code>String</code> will have a length of zero, it does not\ntouch its capacity.</p>\n<h5 id=\"examples-39\"><a class=\"doc-anchor\" href=\"#examples-39\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::from(<span class=\"string\">\"foo\"</span>);\n\ns.clear();\n\n<span class=\"macro\">assert!</span>(s.is_empty());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, s.len());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3</span>, s.capacity());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#1969-1971\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.drain\" class=\"fn\">drain</a>&lt;R&gt;(&amp;mut self, range: R) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.Drain.html\" title=\"struct alloc::string::Drain\">Drain</a>&lt;'_&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Removes the specified range from the string in bulk, returning all\nremoved characters as an iterator.</p>\n<p>The returned iterator keeps a mutable borrow on the string to optimize\nits implementation.</p>\n<h5 id=\"panics-8\"><a class=\"doc-anchor\" href=\"#panics-8\">§</a>Panics</h5>\n<p>Panics if the starting point or end point do not lie on a <a href=\"https://doc.rust-lang.org/1.91.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>\nboundary, or if they’re out of bounds.</p>\n<h5 id=\"leaking\"><a class=\"doc-anchor\" href=\"#leaking\">§</a>Leaking</h5>\n<p>If the returned iterator goes out of scope without being dropped (due to\n<a href=\"https://doc.rust-lang.org/1.91.0/core/mem/fn.forget.html\" title=\"fn core::mem::forget\"><code>core::mem::forget</code></a>, for example), the string may still contain a copy\nof any drained characters, or may have lost characters arbitrarily,\nincluding characters outside the range.</p>\n<h5 id=\"examples-40\"><a class=\"doc-anchor\" href=\"#examples-40\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::from(<span class=\"string\">\"α is alpha, β is beta\"</span>);\n<span class=\"kw\">let </span>beta_offset = s.find(<span class=\"string\">'β'</span>).unwrap_or(s.len());\n\n<span class=\"comment\">// Remove the range up until the β from the string\n</span><span class=\"kw\">let </span>t: String = s.drain(..beta_offset).collect();\n<span class=\"macro\">assert_eq!</span>(t, <span class=\"string\">\"α is alpha, \"</span>);\n<span class=\"macro\">assert_eq!</span>(s, <span class=\"string\">\"β is beta\"</span>);\n\n<span class=\"comment\">// A full range clears the string, like `clear()` does\n</span>s.drain(..);\n<span class=\"macro\">assert_eq!</span>(s, <span class=\"string\">\"\"</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_chars\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2043\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.into_chars\" class=\"fn\">into_chars</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.IntoChars.html\" title=\"struct alloc::string::IntoChars\">IntoChars</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>string_into_chars</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts a <code>String</code> into an iterator over the <a href=\"https://doc.rust-lang.org/1.91.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s of the string.</p>\n<p>As a string consists of valid UTF-8, we can iterate through a string\nby <a href=\"https://doc.rust-lang.org/1.91.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>. This method returns such an iterator.</p>\n<p>It’s important to remember that <a href=\"https://doc.rust-lang.org/1.91.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> represents a Unicode Scalar\nValue, and might not match your idea of what a ‘character’ is. Iteration\nover grapheme clusters may be what you actually want. That functionality\nis not provided by Rust’s standard library, check crates.io instead.</p>\n<h5 id=\"examples-41\"><a class=\"doc-anchor\" href=\"#examples-41\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(string_into_chars)]\n\n</span><span class=\"kw\">let </span>word = String::from(<span class=\"string\">\"goodbye\"</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>chars = word.into_chars();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'g'</span>), chars.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'o'</span>), chars.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'o'</span>), chars.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'d'</span>), chars.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'b'</span>), chars.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'y'</span>), chars.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'e'</span>), chars.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, chars.next());</code></pre></div>\n<p>Remember, <a href=\"https://doc.rust-lang.org/1.91.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s might not match your intuition about characters:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(string_into_chars)]\n\n</span><span class=\"kw\">let </span>y = String::from(<span class=\"string\">\"y̆\"</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>chars = y.into_chars();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'y'</span>), chars.next()); <span class=\"comment\">// not 'y̆'\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">'\\u{0306}'</span>), chars.next());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, chars.next());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace_range\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2069-2071\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.replace_range\" class=\"fn\">replace_range</a>&lt;R&gt;(&amp;mut self, range: R, replace_with: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>)<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Removes the specified range in the string,\nand replaces it with the given string.\nThe given string doesn’t need to be the same length as the range.</p>\n<h5 id=\"panics-9\"><a class=\"doc-anchor\" href=\"#panics-9\">§</a>Panics</h5>\n<p>Panics if the starting point or end point do not lie on a <a href=\"https://doc.rust-lang.org/1.91.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>\nboundary, or if they’re out of bounds.</p>\n<h5 id=\"examples-42\"><a class=\"doc-anchor\" href=\"#examples-42\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::from(<span class=\"string\">\"α is alpha, β is beta\"</span>);\n<span class=\"kw\">let </span>beta_offset = s.find(<span class=\"string\">'β'</span>).unwrap_or(s.len());\n\n<span class=\"comment\">// Replace the range up until the β from the string\n</span>s.replace_range(..beta_offset, <span class=\"string\">\"Α is capital alpha; \"</span>);\n<span class=\"macro\">assert_eq!</span>(s, <span class=\"string\">\"Α is capital alpha; β is beta\"</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_boxed_str\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2119\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.into_boxed_str\" class=\"fn\">into_boxed_str</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts this <code>String</code> into a <code><a href=\"https://doc.rust-lang.org/1.91.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\" title=\"str\">str</a>&gt;</code>.</p>\n<p>Before doing the conversion, this method discards excess capacity like <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#method.shrink_to_fit\" title=\"method alloc::string::String::shrink_to_fit\"><code>shrink_to_fit</code></a>.\nNote that this call may reallocate and copy the bytes of the string.</p>\n<h5 id=\"examples-43\"><a class=\"doc-anchor\" href=\"#examples-43\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = String::from(<span class=\"string\">\"hello\"</span>);\n\n<span class=\"kw\">let </span>b = s.into_boxed_str();</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leak\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.72.0\">1.72.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2150\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#tymethod.leak\" class=\"fn\">leak</a>&lt;'a&gt;(self) -&gt; &amp;'a mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Consumes and leaks the <code>String</code>, returning a mutable reference to the contents,\n<code>&amp;'a mut str</code>.</p>\n<p>The caller has free choice over the returned lifetime, including <code>'static</code>. Indeed,\nthis function is ideally used for data that lives for the remainder of the program’s life,\nas dropping the returned reference will cause a memory leak.</p>\n<p>It does not reallocate or shrink the <code>String</code>, so the leaked allocation may include unused\ncapacity that is not part of the returned slice. If you want to discard excess capacity,\ncall <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html#method.into_boxed_str\" title=\"method alloc::string::String::into_boxed_str\"><code>into_boxed_str</code></a>, and then <a href=\"https://doc.rust-lang.org/1.91.0/alloc/boxed/struct.Box.html#method.leak\" title=\"associated function alloc::boxed::Box::leak\"><code>Box::leak</code></a> instead. However, keep in mind that\ntrimming the capacity may result in a reallocation and copy.</p>\n<h5 id=\"examples-44\"><a class=\"doc-anchor\" href=\"#examples-44\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = String::from(<span class=\"string\">\"bucket\"</span>);\n<span class=\"kw\">let </span>static_ref: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span><span class=\"kw-2\">mut </span>str = x.leak();\n<span class=\"macro\">assert_eq!</span>(static_ref, <span class=\"string\">\"bucket\"</span>);</code></pre></div></div></details></div></details>",0,"xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToSocketAddrs-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/std/net/socket_addr.rs.html#262\">Source</a></span><a href=\"#impl-ToSocketAddrs-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/std/net/socket_addr/trait.ToSocketAddrs.html\" title=\"trait std::net::socket_addr::ToSocketAddrs\">ToSocketAddrs</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Iter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/std/net/socket_addr.rs.html#263\">Source</a><a href=\"#associatedtype.Iter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.91.0/std/net/socket_addr/trait.ToSocketAddrs.html#associatedtype.Iter\" class=\"associatedtype\">Iter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/vec/into_iter/struct.IntoIter.html\" title=\"struct alloc::vec::into_iter::IntoIter\">IntoIter</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/net/socket_addr/enum.SocketAddr.html\" title=\"enum core::net::socket_addr::SocketAddr\">SocketAddr</a>&gt;</h4></section></summary><div class='docblock'>Returned iterator over socket addresses which this type may correspond\nto.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_socket_addrs\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/std/net/socket_addr.rs.html#264\">Source</a><a href=\"#method.to_socket_addrs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/std/net/socket_addr/trait.ToSocketAddrs.html#tymethod.to_socket_addrs\" class=\"fn\">to_socket_addrs</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/vec/into_iter/struct.IntoIter.html\" title=\"struct alloc::vec::into_iter::IntoIter\">IntoIter</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/net/socket_addr/enum.SocketAddr.html\" title=\"enum core::net::socket_addr::SocketAddr\">SocketAddr</a>&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Converts this object to an iterator of resolved <a href=\"https://doc.rust-lang.org/1.91.0/core/net/socket_addr/enum.SocketAddr.html\" title=\"enum core::net::socket_addr::SocketAddr\"><code>SocketAddr</code></a>s. <a href=\"https://doc.rust-lang.org/1.91.0/std/net/socket_addr/trait.ToSocketAddrs.html#tymethod.to_socket_addrs\">Read more</a></div></details></div></details>","ToSocketAddrs","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToTokens-for-String\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/proc_macro/to_tokens.rs.html#292\">Source</a><a href=\"#impl-ToTokens-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/proc_macro/to_tokens/trait.ToTokens.html\" title=\"trait proc_macro::to_tokens::ToTokens\">ToTokens</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_tokens\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/proc_macro/to_tokens.rs.html#293\">Source</a><a href=\"#method.to_tokens\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/proc_macro/to_tokens/trait.ToTokens.html#tymethod.to_tokens\" class=\"fn\">to_tokens</a>(&amp;self, tokens: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/proc_macro/struct.TokenStream.html\" title=\"struct proc_macro::TokenStream\">TokenStream</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>proc_macro_totokens</code>)</span></div></span><div class='docblock'>Write <code>self</code> to the given <code>TokenStream</code>. <a href=\"https://doc.rust-lang.org/1.91.0/proc_macro/to_tokens/trait.ToTokens.html#tymethod.to_tokens\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_token_stream\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/proc_macro/to_tokens.rs.html#57\">Source</a><a href=\"#method.to_token_stream\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/proc_macro/to_tokens/trait.ToTokens.html#method.to_token_stream\" class=\"fn\">to_token_stream</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/proc_macro/struct.TokenStream.html\" title=\"struct proc_macro::TokenStream\">TokenStream</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>proc_macro_totokens</code>)</span></div></span><div class='docblock'>Convert <code>self</code> directly into a <code>TokenStream</code> object. <a href=\"https://doc.rust-lang.org/1.91.0/proc_macro/to_tokens/trait.ToTokens.html#method.to_token_stream\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_token_stream\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/proc_macro/to_tokens.rs.html#67-69\">Source</a><a href=\"#method.into_token_stream\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/proc_macro/to_tokens/trait.ToTokens.html#method.into_token_stream\" class=\"fn\">into_token_stream</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/proc_macro/struct.TokenStream.html\" title=\"struct proc_macro::TokenStream\">TokenStream</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>proc_macro_totokens</code>)</span></div></span><div class='docblock'>Convert <code>self</code> directly into a <code>TokenStream</code> object. <a href=\"https://doc.rust-lang.org/1.91.0/proc_macro/to_tokens/trait.ToTokens.html#method.into_token_stream\">Read more</a></div></details></div></details>","ToTokens","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToTokens-for-String\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/quote/1.0.40/src/quote/to_tokens.rs.html#118\">Source</a><a href=\"#impl-ToTokens-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/quote/1.0.40/quote/to_tokens/trait.ToTokens.html\" title=\"trait quote::to_tokens::ToTokens\">ToTokens</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_tokens\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/quote/1.0.40/src/quote/to_tokens.rs.html#119\">Source</a><a href=\"#method.to_tokens\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/quote/1.0.40/quote/to_tokens/trait.ToTokens.html#tymethod.to_tokens\" class=\"fn\">to_tokens</a>(&amp;self, tokens: &amp;mut <a class=\"struct\" href=\"https://docs.rs/proc-macro2/1.0.101/proc_macro2/struct.TokenStream.html\" title=\"struct proc_macro2::TokenStream\">TokenStream</a>)</h4></section></summary><div class='docblock'>Write <code>self</code> to the given <code>TokenStream</code>. <a href=\"https://docs.rs/quote/1.0.40/quote/to_tokens/trait.ToTokens.html#tymethod.to_tokens\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_token_stream\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/quote/1.0.40/src/quote/to_tokens.rs.html#56\">Source</a><a href=\"#method.to_token_stream\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/quote/1.0.40/quote/to_tokens/trait.ToTokens.html#method.to_token_stream\" class=\"fn\">to_token_stream</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://docs.rs/proc-macro2/1.0.101/proc_macro2/struct.TokenStream.html\" title=\"struct proc_macro2::TokenStream\">TokenStream</a></h4></section></summary><div class='docblock'>Convert <code>self</code> directly into a <code>TokenStream</code> object. <a href=\"https://docs.rs/quote/1.0.40/quote/to_tokens/trait.ToTokens.html#method.to_token_stream\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_token_stream\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/quote/1.0.40/src/quote/to_tokens.rs.html#66-68\">Source</a><a href=\"#method.into_token_stream\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/quote/1.0.40/quote/to_tokens/trait.ToTokens.html#method.into_token_stream\" class=\"fn\">into_token_stream</a>(self) -&gt; <a class=\"struct\" href=\"https://docs.rs/proc-macro2/1.0.101/proc_macro2/struct.TokenStream.html\" title=\"struct proc_macro2::TokenStream\">TokenStream</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Convert <code>self</code> directly into a <code>TokenStream</code> object. <a href=\"https://docs.rs/quote/1.0.40/quote/to_tokens/trait.ToTokens.html#method.into_token_stream\">Read more</a></div></details></div></details>","ToTokens","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26ByteStr%3E-for-String\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/bstr.rs.html#675\">Source</a><a href=\"#impl-TryFrom%3C%26ByteStr%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/core/bstr/struct.ByteStr.html\" title=\"struct core::bstr::ByteStr\">ByteStr</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/bstr.rs.html#676\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/core/str/error/struct.Utf8Error.html\" title=\"struct core::str::error::Utf8Error\">Utf8Error</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/bstr.rs.html#679\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    s: &amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/core/bstr/struct.ByteStr.html\" title=\"struct core::bstr::ByteStr\">ByteStr</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/core/bstr/struct.ByteStr.html\" title=\"struct core::bstr::ByteStr\">ByteStr</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<&'a ByteStr>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CByteString%3E-for-String\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/bstr.rs.html#571\">Source</a><a href=\"#impl-TryFrom%3CByteString%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/bstr/struct.ByteString.html\" title=\"struct alloc::bstr::ByteString\">ByteString</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/bstr.rs.html#572\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.FromUtf8Error.html\" title=\"struct alloc::string::FromUtf8Error\">FromUtf8Error</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/bstr.rs.html#575\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    s: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/bstr/struct.ByteString.html\" title=\"struct alloc::bstr::ByteString\">ByteString</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/bstr/struct.ByteString.html\" title=\"struct alloc::bstr::ByteString\">ByteString</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<ByteString>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CCString%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.85.0\">1.85.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/ffi/c_str.rs.html#842\">Source</a></span><a href=\"#impl-TryFrom%3CCString%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/ffi/c_str/struct.CString.html\" title=\"struct alloc::ffi::c_str::CString\">CString</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/ffi/c_str.rs.html#849\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/ffi/c_str/struct.CString.html\" title=\"struct alloc::ffi::c_str::CString\">CString</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/ffi/c_str/struct.CString.html\" title=\"struct alloc::ffi::c_str::CString\">CString</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"https://doc.rust-lang.org/1.91.0/alloc/ffi/c_str/struct.CString.html\" title=\"struct alloc::ffi::c_str::CString\"><code>CString</code></a> into a <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\"><code>String</code></a> if it contains valid UTF-8 data.</p>\n<p>This method is equivalent to <a href=\"https://doc.rust-lang.org/1.91.0/alloc/ffi/c_str/struct.CString.html#method.into_string\" title=\"method alloc::ffi::c_str::CString::into_string\"><code>CString::into_string</code></a>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/ffi/c_str.rs.html#843\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/ffi/c_str/struct.IntoStringError.html\" title=\"struct alloc::ffi::c_str::IntoStringError\">IntoStringError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<CString>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CVec%3Cu8%3E%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.87.0\">1.87.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#3220\">Source</a></span><a href=\"#impl-TryFrom%3CVec%3Cu8%3E%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.u8.html\">u8</a>&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#3232\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    bytes: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.u8.html\">u8</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.u8.html\">u8</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts the given <a href=\"https://doc.rust-lang.org/1.91.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec&lt;u8&gt;</code></a> into a  <a href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\"><code>String</code></a> if it contains valid UTF-8 data.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s1 = <span class=\"string\">b\"hello world\"</span>.to_vec();\n<span class=\"kw\">let </span>v1 = String::try_from(s1).unwrap();\n<span class=\"macro\">assert_eq!</span>(v1, <span class=\"string\">\"hello world\"</span>);\n</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#3221\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.FromUtf8Error.html\" title=\"struct alloc::string::FromUtf8Error\">FromUtf8Error</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<Vec<u8>>","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Value-for-String\" class=\"impl\"><a href=\"#impl-Value-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Value for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.record\" class=\"method trait-impl\"><a href=\"#method.record\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">record</a>(&amp;self, key: &amp;Field, visitor: &amp;mut dyn Visit)</h4></section></summary><div class='docblock'>Visits this value with the given <code>Visitor</code>.</div></details></div></details>","Value","xtask::metrics::Unit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Write-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#3239\">Source</a></span><a href=\"#impl-Write-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Write.html\" title=\"trait core::fmt::Write\">Write</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#3241\">Source</a><a href=\"#method.write_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Write.html#tymethod.write_str\" class=\"fn\">write_str</a>(&amp;mut self, s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Writes a string slice into this writer, returning whether the write\nsucceeded. <a href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Write.html#tymethod.write_str\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_char\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#3247\">Source</a><a href=\"#method.write_char\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Write.html#method.write_char\" class=\"fn\">write_char</a>(&amp;mut self, c: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.char.html\">char</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Writes a <a href=\"https://doc.rust-lang.org/1.91.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> into this writer, returning whether the write succeeded. <a href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Write.html#method.write_char\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_fmt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/core/fmt/mod.rs.html#209\">Source</a></span><a href=\"#method.write_fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Write.html#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, args: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/struct.Arguments.html\" title=\"struct core::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Glue for usage of the <a href=\"https://doc.rust-lang.org/1.91.0/core/macro.write.html\" title=\"macro core::write\"><code>write!</code></a> macro with implementors of this trait. <a href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Write.html#method.write_fmt\">Read more</a></div></details></div></details>","Write","xtask::metrics::Unit"],["<section id=\"impl-DerefPure-for-String\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#2733\">Source</a><a href=\"#impl-DerefPure-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/ops/deref/trait.DerefPure.html\" title=\"trait core::ops::deref::DerefPure\">DerefPure</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section>","DerefPure","xtask::metrics::Unit"],["<section id=\"impl-Eq-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#357\">Source</a></span><a href=\"#impl-Eq-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section>","Eq","xtask::metrics::Unit"],["<section id=\"impl-StructuralPartialEq-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/alloc/string.rs.html#357\">Source</a></span><a href=\"#impl-StructuralPartialEq-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h3></section>","StructuralPartialEq","xtask::metrics::Unit"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[283753]}