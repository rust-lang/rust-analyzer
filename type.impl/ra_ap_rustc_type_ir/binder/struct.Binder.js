(function() {
    var type_impls = Object.fromEntries([["hir",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binder%3CI,+ExistentialPredicate%3CI%3E%3E\" class=\"impl\"><a href=\"#impl-Binder%3CI,+ExistentialPredicate%3CI%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; Binder&lt;I, ExistentialPredicate&lt;I&gt;&gt;<div class=\"where\">where\n    I: Interner,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_self_ty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_self_ty</a>(\n    &amp;self,\n    cx: I,\n    self_ty: &lt;I as Interner&gt;::Ty,\n) -&gt; &lt;I as Interner&gt;::Clause</h4></section></summary><div class=\"docblock\"><p>Given an existential predicate like <code>?Self: PartialEq&lt;u32&gt;</code> (e.g., derived from <code>dyn PartialEq&lt;u32&gt;</code>),\nand a concrete type <code>self_ty</code>, returns a full predicate where the existentially quantified variable <code>?Self</code>\nhas been replaced with <code>self_ty</code> (e.g., <code>self_ty: PartialEq&lt;u32&gt;</code>, in our example).</p>\n</div></details></div></details>",0,"hir::next_solver::BoundExistentialPredicate","hir::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binder%3CI,+ExistentialProjection%3CI%3E%3E\" class=\"impl\"><a href=\"#impl-Binder%3CI,+ExistentialProjection%3CI%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; Binder&lt;I, ExistentialProjection&lt;I&gt;&gt;<div class=\"where\">where\n    I: Interner,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.with_self_ty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_self_ty</a>(\n    &amp;self,\n    cx: I,\n    self_ty: &lt;I as Interner&gt;::Ty,\n) -&gt; Binder&lt;I, ProjectionPredicate&lt;I&gt;&gt;</h4></section><section id=\"method.item_def_id\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">item_def_id</a>(&amp;self) -&gt; &lt;I as Interner&gt;::DefId</h4></section></div></details>",0,"hir::next_solver::PolyExistentialProjection","hir::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binder%3CI,+ExistentialTraitRef%3CI%3E%3E\" class=\"impl\"><a href=\"#impl-Binder%3CI,+ExistentialTraitRef%3CI%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; Binder&lt;I, ExistentialTraitRef&lt;I&gt;&gt;<div class=\"where\">where\n    I: Interner,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.def_id\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">def_id</a>(&amp;self) -&gt; &lt;I as Interner&gt;::TraitId</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_self_ty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_self_ty</a>(\n    &amp;self,\n    cx: I,\n    self_ty: &lt;I as Interner&gt;::Ty,\n) -&gt; Binder&lt;I, TraitRef&lt;I&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Object types don’t have a self type specified. Therefore, when\nwe convert the principal trait-ref into a normal trait-ref,\nyou must give <em>some</em> self type. A common choice is <code>mk_err()</code>\nor some placeholder type.</p>\n</div></details></div></details>",0,"hir::next_solver::PolyExistentialTraitRef","hir::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binder%3CI,+FnSig%3CI%3E%3E\" class=\"impl\"><a href=\"#impl-Binder%3CI,+FnSig%3CI%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; Binder&lt;I, FnSig&lt;I&gt;&gt;<div class=\"where\">where\n    I: Interner,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.inputs\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">inputs</a>(self) -&gt; Binder&lt;I, &lt;I as Interner&gt;::FnInputTys&gt;</h4></section><section id=\"method.input\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">input</a>(self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>) -&gt; Binder&lt;I, &lt;I as Interner&gt;::Ty&gt;</h4></section><section id=\"method.inputs_and_output\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">inputs_and_output</a>(self) -&gt; Binder&lt;I, &lt;I as Interner&gt;::Tys&gt;</h4></section><section id=\"method.output\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">output</a>(self) -&gt; Binder&lt;I, &lt;I as Interner&gt;::Ty&gt;</h4></section><section id=\"method.c_variadic\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">c_variadic</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section><section id=\"method.safety\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">safety</a>(self) -&gt; &lt;I as Interner&gt;::Safety</h4></section><section id=\"method.abi\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">abi</a>(self) -&gt; &lt;I as Interner&gt;::Abi</h4></section><section id=\"method.is_fn_trait_compatible\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_fn_trait_compatible</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section><section id=\"method.split\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">split</a>(self) -&gt; (Binder&lt;I, FnSigTys&lt;I&gt;&gt;, FnHeader&lt;I&gt;)</h4></section></div></details>",0,"hir::next_solver::Binder","hir::next_solver::PolyFnSig"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binder%3CI,+FnSigTys%3CI%3E%3E\" class=\"impl\"><a href=\"#impl-Binder%3CI,+FnSigTys%3CI%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; Binder&lt;I, FnSigTys&lt;I&gt;&gt;<div class=\"where\">where\n    I: Interner,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.with\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with</a>(self, hdr: FnHeader&lt;I&gt;) -&gt; Binder&lt;I, FnSig&lt;I&gt;&gt;</h4></section><section id=\"method.inputs\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">inputs</a>(self) -&gt; Binder&lt;I, &lt;I as Interner&gt;::FnInputTys&gt;</h4></section><section id=\"method.input\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">input</a>(self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>) -&gt; Binder&lt;I, &lt;I as Interner&gt;::Ty&gt;</h4></section><section id=\"method.inputs_and_output\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">inputs_and_output</a>(self) -&gt; Binder&lt;I, &lt;I as Interner&gt;::Tys&gt;</h4></section><section id=\"method.output\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">output</a>(self) -&gt; Binder&lt;I, &lt;I as Interner&gt;::Ty&gt;</h4></section></div></details>",0,"hir::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binder%3CI,+HostEffectPredicate%3CI%3E%3E\" class=\"impl\"><a href=\"#impl-Binder%3CI,+HostEffectPredicate%3CI%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; Binder&lt;I, HostEffectPredicate&lt;I&gt;&gt;<div class=\"where\">where\n    I: Interner,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.def_id\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">def_id</a>(self) -&gt; &lt;I as Interner&gt;::TraitId</h4></section><section id=\"method.self_ty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">self_ty</a>(self) -&gt; Binder&lt;I, &lt;I as Interner&gt;::Ty&gt;</h4></section><section id=\"method.constness\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">constness</a>(self) -&gt; BoundConstness</h4></section></div></details>",0,"hir::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binder%3CI,+Option%3CT%3E%3E\" class=\"impl\"><a href=\"#impl-Binder%3CI,+Option%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; Binder&lt;I, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;<div class=\"where\">where\n    I: Interner,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.transpose\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">transpose</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Binder&lt;I, T&gt;&gt;</h4></section></div></details>",0,"hir::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binder%3CI,+ProjectionPredicate%3CI%3E%3E\" class=\"impl\"><a href=\"#impl-Binder%3CI,+ProjectionPredicate%3CI%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; Binder&lt;I, ProjectionPredicate&lt;I&gt;&gt;<div class=\"where\">where\n    I: Interner,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.trait_def_id\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">trait_def_id</a>(&amp;self, cx: I) -&gt; &lt;I as Interner&gt;::TraitId</h4></section></summary><div class=\"docblock\"><p>Returns the <code>DefId</code> of the trait of the associated item being projected.</p>\n</div></details><section id=\"method.term\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">term</a>(&amp;self) -&gt; Binder&lt;I, &lt;I as Interner&gt;::Term&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.item_def_id\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">item_def_id</a>(&amp;self) -&gt; &lt;I as Interner&gt;::DefId</h4></section></summary><div class=\"docblock\"><p>The <code>DefId</code> of the <code>TraitItem</code> for the associated type.</p>\n<p>Note that this is not the <code>DefId</code> of the <code>TraitRef</code> containing this\nassociated type, which is in <code>tcx.associated_item(projection_def_id()).container</code>.</p>\n</div></details></div></details>",0,"hir::next_solver::PolyProjectionPredicate","hir::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binder%3CI,+T%3E\" class=\"impl\"><a href=\"#impl-Binder%3CI,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; Binder&lt;I, T&gt;<div class=\"where\">where\n    I: Interner,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.skip_binder\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">skip_binder</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the value contained inside of this <code>for&lt;'a&gt;</code>. Accessing generic args\nin the returned value is generally incorrect.</p>\n<p>Please read <a href=\"https://rustc-dev-guide.rust-lang.org/ty_module/instantiating_binders.html\">https://rustc-dev-guide.rust-lang.org/ty_module/instantiating_binders.html</a>\nbefore using this function. It is usually better to discharge the binder using\n<code>no_bound_vars</code> or <code>instantiate_bound_regions</code> or something like that.</p>\n<p><code>skip_binder</code> is only valid when you are either extracting data that does not reference\nany generic arguments, e.g. a <code>DefId</code>, or when you’re making sure you only pass the\nvalue to things which can handle escaping bound vars.</p>\n<p>See existing uses of <code>.skip_binder()</code> in <code>rustc_trait_selection::traits::select</code>\nor <code>rustc_next_trait_solver</code> for examples.</p>\n</div></details><section id=\"method.bound_vars\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">bound_vars</a>(&amp;self) -&gt; &lt;I as Interner&gt;::BoundVarKinds</h4></section><section id=\"method.as_ref\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_ref</a>(&amp;self) -&gt; Binder&lt;I, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;T</a>&gt;</h4></section><section id=\"method.as_deref\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_deref</a>(&amp;self) -&gt; Binder&lt;I, &amp;&lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.91.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>,</div></h4></section><section id=\"method.map_bound_ref\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">map_bound_ref</a>&lt;F, U&gt;(&amp;self, f: F) -&gt; Binder&lt;I, U&gt;<div class=\"where\">where\n    U: TypeVisitable&lt;I&gt;,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;T</a>) -&gt; U,</div></h4></section><section id=\"method.map_bound\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">map_bound</a>&lt;F, U&gt;(self, f: F) -&gt; Binder&lt;I, U&gt;<div class=\"where\">where\n    U: TypeVisitable&lt;I&gt;,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section><section id=\"method.try_map_bound\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_map_bound</a>&lt;F, U, E&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Binder&lt;I, U&gt;, E&gt;<div class=\"where\">where\n    U: TypeVisitable&lt;I&gt;,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;U, E&gt;,</div></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.rebind\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">rebind</a>&lt;U&gt;(&amp;self, value: U) -&gt; Binder&lt;I, U&gt;<div class=\"where\">where\n    U: TypeVisitable&lt;I&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Wraps a <code>value</code> in a binder, using the same bound variables as the\ncurrent <code>Binder</code>. This should not be used if the new value <em>changes</em>\nthe bound variables. Note: the (old or new) value itself does not\nnecessarily need to <em>name</em> all the bound variables.</p>\n<p>This currently doesn’t do anything different than <code>bind</code>, because we\ndon’t actually track bound vars. However, semantically, it is different\nbecause bound vars aren’t allowed to change here, whereas they are\nin <code>bind</code>. This may be (debug) asserted in the future.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.no_bound_vars\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">no_bound_vars</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: TypeVisitable&lt;I&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Unwraps and returns the value within, but only if it contains\nno bound vars at all. (In other words, if this binder –\nand indeed any enclosing binder – doesn’t bind anything at\nall.) Otherwise, returns <code>None</code>.</p>\n<p>(One could imagine having a method that just unwraps a single\nbinder, but permits late-bound vars bound by enclosing\nbinders, but that would require adjusting the debruijn\nindices, and given the shallow binding structure we often use,\nwould not be that useful.)</p>\n</div></details></div></details>",0,"hir::next_solver::BoundExistentialPredicate","hir::next_solver::PolyTraitPredicate","hir::next_solver::PolyRegionOutlivesPredicate","hir::next_solver::PolyTypeOutlivesPredicate","hir::next_solver::PolySubtypePredicate","hir::next_solver::PolyCoercePredicate","hir::next_solver::PolyProjectionPredicate","hir::next_solver::PolyTraitRef","hir::next_solver::PolyExistentialTraitRef","hir::next_solver::PolyExistentialProjection","hir::next_solver::Binder","hir::next_solver::PolyFnSig"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binder%3CI,+T%3E\" class=\"impl\"><a href=\"#impl-Binder%3CI,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; Binder&lt;I, T&gt;<div class=\"where\">where\n    I: Interner,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.iter\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">iter</a>(self) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = Binder&lt;I, &lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" title=\"type core::iter::traits::collect::IntoIterator::Item\">Item</a>&gt;&gt;</h4></section></div></details>",0,"hir::next_solver::BoundExistentialPredicate","hir::next_solver::PolyTraitPredicate","hir::next_solver::PolyRegionOutlivesPredicate","hir::next_solver::PolyTypeOutlivesPredicate","hir::next_solver::PolySubtypePredicate","hir::next_solver::PolyCoercePredicate","hir::next_solver::PolyProjectionPredicate","hir::next_solver::PolyTraitRef","hir::next_solver::PolyExistentialTraitRef","hir::next_solver::PolyExistentialProjection","hir::next_solver::Binder","hir::next_solver::PolyFnSig"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binder%3CI,+T%3E\" class=\"impl\"><a href=\"#impl-Binder%3CI,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; Binder&lt;I, T&gt;<div class=\"where\">where\n    I: Interner,\n    T: TypeVisitable&lt;I&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.dummy\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">dummy</a>(value: T) -&gt; Binder&lt;I, T&gt;</h4></section></summary><div class=\"docblock\"><p>Wraps <code>value</code> in a binder, asserting that <code>value</code> does not\ncontain any bound vars that would be bound by the\nbinder. This is commonly used to ‘inject’ a value T into a\ndifferent binding level.</p>\n</div></details><section id=\"method.bind_with_vars\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">bind_with_vars</a>(\n    value: T,\n    bound_vars: &lt;I as Interner&gt;::BoundVarKinds,\n) -&gt; Binder&lt;I, T&gt;</h4></section></div></details>",0,"hir::next_solver::BoundExistentialPredicate","hir::next_solver::PolyTraitPredicate","hir::next_solver::PolyRegionOutlivesPredicate","hir::next_solver::PolyTypeOutlivesPredicate","hir::next_solver::PolySubtypePredicate","hir::next_solver::PolyCoercePredicate","hir::next_solver::PolyProjectionPredicate","hir::next_solver::PolyTraitRef","hir::next_solver::PolyExistentialTraitRef","hir::next_solver::PolyExistentialProjection","hir::next_solver::Binder","hir::next_solver::PolyFnSig"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binder%3CI,+TraitPredicate%3CI%3E%3E\" class=\"impl\"><a href=\"#impl-Binder%3CI,+TraitPredicate%3CI%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; Binder&lt;I, TraitPredicate&lt;I&gt;&gt;<div class=\"where\">where\n    I: Interner,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.def_id\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">def_id</a>(self) -&gt; &lt;I as Interner&gt;::TraitId</h4></section><section id=\"method.self_ty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">self_ty</a>(self) -&gt; Binder&lt;I, &lt;I as Interner&gt;::Ty&gt;</h4></section><section id=\"method.polarity\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">polarity</a>(self) -&gt; PredicatePolarity</h4></section></div></details>",0,"hir::next_solver::PolyTraitPredicate","hir::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binder%3CI,+TraitRef%3CI%3E%3E\" class=\"impl\"><a href=\"#impl-Binder%3CI,+TraitRef%3CI%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; Binder&lt;I, TraitRef&lt;I&gt;&gt;<div class=\"where\">where\n    I: Interner,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.self_ty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">self_ty</a>(&amp;self) -&gt; Binder&lt;I, &lt;I as Interner&gt;::Ty&gt;</h4></section><section id=\"method.def_id\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">def_id</a>(&amp;self) -&gt; &lt;I as Interner&gt;::TraitId</h4></section><section id=\"method.to_host_effect_clause\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">to_host_effect_clause</a>(\n    self,\n    cx: I,\n    constness: BoundConstness,\n) -&gt; &lt;I as Interner&gt;::Clause</h4></section></div></details>",0,"hir::next_solver::PolyTraitRef","hir::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Binder%3CI,+T%3E\" class=\"impl\"><a href=\"#impl-Clone-for-Binder%3CI,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for Binder&lt;I, T&gt;<div class=\"where\">where\n    I: Interner,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Binder&lt;I, T&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/core/clone.rs.html#245-247\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","hir::next_solver::BoundExistentialPredicate","hir::next_solver::PolyTraitPredicate","hir::next_solver::PolyRegionOutlivesPredicate","hir::next_solver::PolyTypeOutlivesPredicate","hir::next_solver::PolySubtypePredicate","hir::next_solver::PolyCoercePredicate","hir::next_solver::PolyProjectionPredicate","hir::next_solver::PolyTraitRef","hir::next_solver::PolyExistentialTraitRef","hir::next_solver::PolyExistentialProjection","hir::next_solver::Binder","hir::next_solver::PolyFnSig"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Binder%3CI,+T%3E\" class=\"impl\"><a href=\"#impl-Debug-for-Binder%3CI,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for Binder&lt;I, T&gt;<div class=\"where\">where\n    I: Interner,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, __f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","hir::next_solver::BoundExistentialPredicate","hir::next_solver::PolyTraitPredicate","hir::next_solver::PolyRegionOutlivesPredicate","hir::next_solver::PolyTypeOutlivesPredicate","hir::next_solver::PolySubtypePredicate","hir::next_solver::PolyCoercePredicate","hir::next_solver::PolyProjectionPredicate","hir::next_solver::PolyTraitRef","hir::next_solver::PolyExistentialTraitRef","hir::next_solver::PolyExistentialProjection","hir::next_solver::Binder","hir::next_solver::PolyFnSig"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-Binder%3CI,+T%3E\" class=\"impl\"><a href=\"#impl-Display-for-Binder%3CI,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for Binder&lt;I, T&gt;<div class=\"where\">where\n    I: Interner + IrPrint&lt;Binder&lt;I, T&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","hir::next_solver::BoundExistentialPredicate","hir::next_solver::PolyTraitPredicate","hir::next_solver::PolyRegionOutlivesPredicate","hir::next_solver::PolyTypeOutlivesPredicate","hir::next_solver::PolySubtypePredicate","hir::next_solver::PolyCoercePredicate","hir::next_solver::PolyProjectionPredicate","hir::next_solver::PolyTraitRef","hir::next_solver::PolyExistentialTraitRef","hir::next_solver::PolyExistentialProjection","hir::next_solver::Binder","hir::next_solver::PolyFnSig"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CUnsafeBinderInner%3CI%3E%3E-for-Binder%3CI,+%3CI+as+Interner%3E::Ty%3E\" class=\"impl\"><a href=\"#impl-From%3CUnsafeBinderInner%3CI%3E%3E-for-Binder%3CI,+%3CI+as+Interner%3E::Ty%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;UnsafeBinderInner&lt;I&gt;&gt; for Binder&lt;I, &lt;I as Interner&gt;::Ty&gt;<div class=\"where\">where\n    I: Interner,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: UnsafeBinderInner&lt;I&gt;) -&gt; Binder&lt;I, &lt;I as Interner&gt;::Ty&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<UnsafeBinderInner<I>>","hir::next_solver::BoundExistentialPredicate","hir::next_solver::PolyTraitPredicate","hir::next_solver::PolyRegionOutlivesPredicate","hir::next_solver::PolyTypeOutlivesPredicate","hir::next_solver::PolySubtypePredicate","hir::next_solver::PolyCoercePredicate","hir::next_solver::PolyProjectionPredicate","hir::next_solver::PolyTraitRef","hir::next_solver::PolyExistentialTraitRef","hir::next_solver::PolyExistentialProjection","hir::next_solver::Binder","hir::next_solver::PolyFnSig"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Binder%3CI,+T%3E\" class=\"impl\"><a href=\"#impl-Hash-for-Binder%3CI,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for Binder&lt;I, T&gt;<div class=\"where\">where\n    I: Interner,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, __state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.91.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.91.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.91.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.91.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","hir::next_solver::BoundExistentialPredicate","hir::next_solver::PolyTraitPredicate","hir::next_solver::PolyRegionOutlivesPredicate","hir::next_solver::PolyTypeOutlivesPredicate","hir::next_solver::PolySubtypePredicate","hir::next_solver::PolyCoercePredicate","hir::next_solver::PolyProjectionPredicate","hir::next_solver::PolyTraitRef","hir::next_solver::PolyExistentialTraitRef","hir::next_solver::PolyExistentialProjection","hir::next_solver::Binder","hir::next_solver::PolyFnSig"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HirDisplay%3C'db%3E-for-Binder%3CDbInterner%3C'db%3E,+FnSig%3CDbInterner%3C'db%3E%3E%3E\" class=\"impl\"><a href=\"#impl-HirDisplay%3C'db%3E-for-Binder%3CDbInterner%3C'db%3E,+FnSig%3CDbInterner%3C'db%3E%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'db&gt; <a class=\"trait\" href=\"hir/trait.HirDisplay.html\" title=\"trait hir::HirDisplay\">HirDisplay</a>&lt;'db&gt; for Binder&lt;<a class=\"struct\" href=\"hir/next_solver/struct.DbInterner.html\" title=\"struct hir::next_solver::DbInterner\">DbInterner</a>&lt;'db&gt;, FnSig&lt;<a class=\"struct\" href=\"hir/next_solver/struct.DbInterner.html\" title=\"struct hir::next_solver::DbInterner\">DbInterner</a>&lt;'db&gt;&gt;&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.hir_fmt\" class=\"method trait-impl\"><a href=\"#method.hir_fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hir/trait.HirDisplay.html#tymethod.hir_fmt\" class=\"fn\">hir_fmt</a>(&amp;self, f: &amp;mut HirFormatter&lt;'_, 'db&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"hir/enum.HirDisplayError.html\" title=\"enum hir::HirDisplayError\">HirDisplayError</a>&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_displayable\" class=\"method trait-impl\"><a href=\"#method.into_displayable\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hir/trait.HirDisplay.html#method.into_displayable\" class=\"fn\">into_displayable</a>&lt;'a&gt;(\n    &amp;'a self,\n    db: &amp;'db (dyn <a class=\"trait\" href=\"hir/db/trait.HirDatabase.html\" title=\"trait hir::db::HirDatabase\">HirDatabase</a> + 'static),\n    max_size: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>&gt;,\n    limited_size: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>&gt;,\n    omit_verbose_types: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a>,\n    display_target: <a class=\"struct\" href=\"hir/struct.DisplayTarget.html\" title=\"struct hir::DisplayTarget\">DisplayTarget</a>,\n    display_kind: DisplayKind,\n    closure_style: <a class=\"enum\" href=\"hir/enum.ClosureStyle.html\" title=\"enum hir::ClosureStyle\">ClosureStyle</a>,\n    show_container_bounds: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a>,\n) -&gt; HirDisplayWrapper&lt;'a, 'db, Self&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Returns a <code>Display</code>able type that is human-readable.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.display\" class=\"method trait-impl\"><a href=\"#method.display\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hir/trait.HirDisplay.html#method.display\" class=\"fn\">display</a>&lt;'a&gt;(\n    &amp;'a self,\n    db: &amp;'db (dyn <a class=\"trait\" href=\"hir/db/trait.HirDatabase.html\" title=\"trait hir::db::HirDatabase\">HirDatabase</a> + 'static),\n    display_target: <a class=\"struct\" href=\"hir/struct.DisplayTarget.html\" title=\"struct hir::DisplayTarget\">DisplayTarget</a>,\n) -&gt; HirDisplayWrapper&lt;'a, 'db, Self&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Returns a <code>Display</code>able type that is human-readable.\nUse this for showing types to the user (e.g. diagnostics)</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.display_truncated\" class=\"method trait-impl\"><a href=\"#method.display_truncated\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hir/trait.HirDisplay.html#method.display_truncated\" class=\"fn\">display_truncated</a>&lt;'a&gt;(\n    &amp;'a self,\n    db: &amp;'db (dyn <a class=\"trait\" href=\"hir/db/trait.HirDatabase.html\" title=\"trait hir::db::HirDatabase\">HirDatabase</a> + 'static),\n    max_size: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>&gt;,\n    display_target: <a class=\"struct\" href=\"hir/struct.DisplayTarget.html\" title=\"struct hir::DisplayTarget\">DisplayTarget</a>,\n) -&gt; HirDisplayWrapper&lt;'a, 'db, Self&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Returns a <code>Display</code>able type that is human-readable and tries to be succinct.\nUse this for showing types to the user where space is constrained (e.g. doc popups)</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.display_limited\" class=\"method trait-impl\"><a href=\"#method.display_limited\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hir/trait.HirDisplay.html#method.display_limited\" class=\"fn\">display_limited</a>&lt;'a&gt;(\n    &amp;'a self,\n    db: &amp;'db (dyn <a class=\"trait\" href=\"hir/db/trait.HirDatabase.html\" title=\"trait hir::db::HirDatabase\">HirDatabase</a> + 'static),\n    limited_size: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>&gt;,\n    display_target: <a class=\"struct\" href=\"hir/struct.DisplayTarget.html\" title=\"struct hir::DisplayTarget\">DisplayTarget</a>,\n) -&gt; HirDisplayWrapper&lt;'a, 'db, Self&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Returns a <code>Display</code>able type that is human-readable and tries to limit the number of items inside.\nUse this for showing definitions which may contain too many items, like <code>trait</code>, <code>struct</code>, <code>enum</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.display_source_code\" class=\"method trait-impl\"><a href=\"#method.display_source_code\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hir/trait.HirDisplay.html#method.display_source_code\" class=\"fn\">display_source_code</a>&lt;'a&gt;(\n    &amp;'a self,\n    db: &amp;'db (dyn <a class=\"trait\" href=\"hir/db/trait.HirDatabase.html\" title=\"trait hir::db::HirDatabase\">HirDatabase</a> + 'static),\n    module_id: ModuleId,\n    allow_opaque: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>, DisplaySourceCodeError&gt;</h4></section></summary><div class='docblock'>Returns a String representation of <code>self</code> that can be inserted into the given module.\nUse this when generating code (e.g. assists)</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.display_test\" class=\"method trait-impl\"><a href=\"#method.display_test\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hir/trait.HirDisplay.html#method.display_test\" class=\"fn\">display_test</a>&lt;'a&gt;(\n    &amp;'a self,\n    db: &amp;'db (dyn <a class=\"trait\" href=\"hir/db/trait.HirDatabase.html\" title=\"trait hir::db::HirDatabase\">HirDatabase</a> + 'static),\n    display_target: <a class=\"struct\" href=\"hir/struct.DisplayTarget.html\" title=\"struct hir::DisplayTarget\">DisplayTarget</a>,\n) -&gt; HirDisplayWrapper&lt;'a, 'db, Self&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Returns a String representation of <code>self</code> for test purposes</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.display_with_container_bounds\" class=\"method trait-impl\"><a href=\"#method.display_with_container_bounds\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hir/trait.HirDisplay.html#method.display_with_container_bounds\" class=\"fn\">display_with_container_bounds</a>&lt;'a&gt;(\n    &amp;'a self,\n    db: &amp;'db (dyn <a class=\"trait\" href=\"hir/db/trait.HirDatabase.html\" title=\"trait hir::db::HirDatabase\">HirDatabase</a> + 'static),\n    show_container_bounds: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a>,\n    display_target: <a class=\"struct\" href=\"hir/struct.DisplayTarget.html\" title=\"struct hir::DisplayTarget\">DisplayTarget</a>,\n) -&gt; HirDisplayWrapper&lt;'a, 'db, Self&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Returns a String representation of <code>self</code> that shows the constraint from\nthe container for functions</div></details></div></details>","HirDisplay<'db>","hir::next_solver::Binder","hir::next_solver::PolyFnSig"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Lift%3CU%3E-for-Binder%3CI,+T%3E\" class=\"impl\"><a href=\"#impl-Lift%3CU%3E-for-Binder%3CI,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, U, T&gt; Lift&lt;U&gt; for Binder&lt;I, T&gt;<div class=\"where\">where\n    I: Interner,\n    U: Interner,\n    T: Lift&lt;U&gt;,\n    &lt;I as Interner&gt;::BoundVarKinds: Lift&lt;U, Lifted = &lt;U as Interner&gt;::BoundVarKinds&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Lifted\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Lifted\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Lifted</a> = Binder&lt;U, &lt;T as Lift&lt;U&gt;&gt;::Lifted&gt;</h4></section><section id=\"method.lift_to_interner\" class=\"method trait-impl\"><a href=\"#method.lift_to_interner\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lift_to_interner</a>(self, cx: U) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;Binder&lt;I, T&gt; as Lift&lt;U&gt;&gt;::Lifted&gt;</h4></section></div></details>","Lift<U>","hir::next_solver::BoundExistentialPredicate","hir::next_solver::PolyTraitPredicate","hir::next_solver::PolyRegionOutlivesPredicate","hir::next_solver::PolyTypeOutlivesPredicate","hir::next_solver::PolySubtypePredicate","hir::next_solver::PolyCoercePredicate","hir::next_solver::PolyProjectionPredicate","hir::next_solver::PolyTraitRef","hir::next_solver::PolyExistentialTraitRef","hir::next_solver::PolyExistentialProjection","hir::next_solver::Binder","hir::next_solver::PolyFnSig"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Binder%3CI,+T%3E\" class=\"impl\"><a href=\"#impl-PartialEq-for-Binder%3CI,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for Binder&lt;I, T&gt;<div class=\"where\">where\n    I: Interner,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, __other: &amp;Binder&lt;I, T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","hir::next_solver::BoundExistentialPredicate","hir::next_solver::PolyTraitPredicate","hir::next_solver::PolyRegionOutlivesPredicate","hir::next_solver::PolyTypeOutlivesPredicate","hir::next_solver::PolySubtypePredicate","hir::next_solver::PolyCoercePredicate","hir::next_solver::PolyProjectionPredicate","hir::next_solver::PolyTraitRef","hir::next_solver::PolyExistentialTraitRef","hir::next_solver::PolyExistentialProjection","hir::next_solver::Binder","hir::next_solver::PolyFnSig"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Relate%3CI%3E-for-Binder%3CI,+T%3E\" class=\"impl\"><a href=\"#impl-Relate%3CI%3E-for-Binder%3CI,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; <a class=\"trait\" href=\"hir/next_solver/infer/relate/trait.Relate.html\" title=\"trait hir::next_solver::infer::relate::Relate\">Relate</a>&lt;I&gt; for Binder&lt;I, T&gt;<div class=\"where\">where\n    I: Interner,\n    T: <a class=\"trait\" href=\"hir/next_solver/infer/relate/trait.Relate.html\" title=\"trait hir::next_solver::infer::relate::Relate\">Relate</a>&lt;I&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.relate\" class=\"method trait-impl\"><a href=\"#method.relate\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hir/next_solver/infer/relate/trait.Relate.html#tymethod.relate\" class=\"fn\">relate</a>&lt;R&gt;(\n    relation: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;mut R</a>,\n    a: Binder&lt;I, T&gt;,\n    b: Binder&lt;I, T&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Binder&lt;I, T&gt;, TypeError&lt;I&gt;&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"hir/next_solver/infer/relate/trait.TypeRelation.html\" title=\"trait hir::next_solver::infer::relate::TypeRelation\">TypeRelation</a>&lt;I&gt;,</div></h4></section></div></details>","Relate<I>","hir::next_solver::BoundExistentialPredicate","hir::next_solver::PolyTraitPredicate","hir::next_solver::PolyRegionOutlivesPredicate","hir::next_solver::PolyTypeOutlivesPredicate","hir::next_solver::PolySubtypePredicate","hir::next_solver::PolyCoercePredicate","hir::next_solver::PolyProjectionPredicate","hir::next_solver::PolyTraitRef","hir::next_solver::PolyExistentialTraitRef","hir::next_solver::PolyExistentialProjection","hir::next_solver::Binder","hir::next_solver::PolyFnSig"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToTrace%3C'db%3E-for-Binder%3CDbInterner%3C'db%3E,+ExistentialProjection%3CDbInterner%3C'db%3E%3E%3E\" class=\"impl\"><a href=\"#impl-ToTrace%3C'db%3E-for-Binder%3CDbInterner%3C'db%3E,+ExistentialProjection%3CDbInterner%3C'db%3E%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'db&gt; <a class=\"trait\" href=\"hir/next_solver/infer/at/trait.ToTrace.html\" title=\"trait hir::next_solver::infer::at::ToTrace\">ToTrace</a>&lt;'db&gt; for Binder&lt;<a class=\"struct\" href=\"hir/next_solver/struct.DbInterner.html\" title=\"struct hir::next_solver::DbInterner\">DbInterner</a>&lt;'db&gt;, ExistentialProjection&lt;<a class=\"struct\" href=\"hir/next_solver/struct.DbInterner.html\" title=\"struct hir::next_solver::DbInterner\">DbInterner</a>&lt;'db&gt;&gt;&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.to_trace\" class=\"method trait-impl\"><a href=\"#method.to_trace\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hir/next_solver/infer/at/trait.ToTrace.html#tymethod.to_trace\" class=\"fn\">to_trace</a>(\n    cause: &amp;ObligationCause,\n    a: Binder&lt;<a class=\"struct\" href=\"hir/next_solver/struct.DbInterner.html\" title=\"struct hir::next_solver::DbInterner\">DbInterner</a>&lt;'db&gt;, ExistentialProjection&lt;<a class=\"struct\" href=\"hir/next_solver/struct.DbInterner.html\" title=\"struct hir::next_solver::DbInterner\">DbInterner</a>&lt;'db&gt;&gt;&gt;,\n    b: Binder&lt;<a class=\"struct\" href=\"hir/next_solver/struct.DbInterner.html\" title=\"struct hir::next_solver::DbInterner\">DbInterner</a>&lt;'db&gt;, ExistentialProjection&lt;<a class=\"struct\" href=\"hir/next_solver/struct.DbInterner.html\" title=\"struct hir::next_solver::DbInterner\">DbInterner</a>&lt;'db&gt;&gt;&gt;,\n) -&gt; <a class=\"struct\" href=\"hir/next_solver/infer/struct.TypeTrace.html\" title=\"struct hir::next_solver::infer::TypeTrace\">TypeTrace</a>&lt;'db&gt;</h4></section></div></details>","ToTrace<'db>","hir::next_solver::PolyExistentialProjection","hir::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToTrace%3C'db%3E-for-Binder%3CDbInterner%3C'db%3E,+ExistentialTraitRef%3CDbInterner%3C'db%3E%3E%3E\" class=\"impl\"><a href=\"#impl-ToTrace%3C'db%3E-for-Binder%3CDbInterner%3C'db%3E,+ExistentialTraitRef%3CDbInterner%3C'db%3E%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'db&gt; <a class=\"trait\" href=\"hir/next_solver/infer/at/trait.ToTrace.html\" title=\"trait hir::next_solver::infer::at::ToTrace\">ToTrace</a>&lt;'db&gt; for Binder&lt;<a class=\"struct\" href=\"hir/next_solver/struct.DbInterner.html\" title=\"struct hir::next_solver::DbInterner\">DbInterner</a>&lt;'db&gt;, ExistentialTraitRef&lt;<a class=\"struct\" href=\"hir/next_solver/struct.DbInterner.html\" title=\"struct hir::next_solver::DbInterner\">DbInterner</a>&lt;'db&gt;&gt;&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.to_trace\" class=\"method trait-impl\"><a href=\"#method.to_trace\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hir/next_solver/infer/at/trait.ToTrace.html#tymethod.to_trace\" class=\"fn\">to_trace</a>(\n    cause: &amp;ObligationCause,\n    a: Binder&lt;<a class=\"struct\" href=\"hir/next_solver/struct.DbInterner.html\" title=\"struct hir::next_solver::DbInterner\">DbInterner</a>&lt;'db&gt;, ExistentialTraitRef&lt;<a class=\"struct\" href=\"hir/next_solver/struct.DbInterner.html\" title=\"struct hir::next_solver::DbInterner\">DbInterner</a>&lt;'db&gt;&gt;&gt;,\n    b: Binder&lt;<a class=\"struct\" href=\"hir/next_solver/struct.DbInterner.html\" title=\"struct hir::next_solver::DbInterner\">DbInterner</a>&lt;'db&gt;, ExistentialTraitRef&lt;<a class=\"struct\" href=\"hir/next_solver/struct.DbInterner.html\" title=\"struct hir::next_solver::DbInterner\">DbInterner</a>&lt;'db&gt;&gt;&gt;,\n) -&gt; <a class=\"struct\" href=\"hir/next_solver/infer/struct.TypeTrace.html\" title=\"struct hir::next_solver::infer::TypeTrace\">TypeTrace</a>&lt;'db&gt;</h4></section></div></details>","ToTrace<'db>","hir::next_solver::PolyExistentialTraitRef","hir::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToTrace%3C'db%3E-for-Binder%3CDbInterner%3C'db%3E,+FnSig%3CDbInterner%3C'db%3E%3E%3E\" class=\"impl\"><a href=\"#impl-ToTrace%3C'db%3E-for-Binder%3CDbInterner%3C'db%3E,+FnSig%3CDbInterner%3C'db%3E%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'db&gt; <a class=\"trait\" href=\"hir/next_solver/infer/at/trait.ToTrace.html\" title=\"trait hir::next_solver::infer::at::ToTrace\">ToTrace</a>&lt;'db&gt; for Binder&lt;<a class=\"struct\" href=\"hir/next_solver/struct.DbInterner.html\" title=\"struct hir::next_solver::DbInterner\">DbInterner</a>&lt;'db&gt;, FnSig&lt;<a class=\"struct\" href=\"hir/next_solver/struct.DbInterner.html\" title=\"struct hir::next_solver::DbInterner\">DbInterner</a>&lt;'db&gt;&gt;&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.to_trace\" class=\"method trait-impl\"><a href=\"#method.to_trace\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hir/next_solver/infer/at/trait.ToTrace.html#tymethod.to_trace\" class=\"fn\">to_trace</a>(\n    cause: &amp;ObligationCause,\n    a: Binder&lt;<a class=\"struct\" href=\"hir/next_solver/struct.DbInterner.html\" title=\"struct hir::next_solver::DbInterner\">DbInterner</a>&lt;'db&gt;, FnSig&lt;<a class=\"struct\" href=\"hir/next_solver/struct.DbInterner.html\" title=\"struct hir::next_solver::DbInterner\">DbInterner</a>&lt;'db&gt;&gt;&gt;,\n    b: Binder&lt;<a class=\"struct\" href=\"hir/next_solver/struct.DbInterner.html\" title=\"struct hir::next_solver::DbInterner\">DbInterner</a>&lt;'db&gt;, FnSig&lt;<a class=\"struct\" href=\"hir/next_solver/struct.DbInterner.html\" title=\"struct hir::next_solver::DbInterner\">DbInterner</a>&lt;'db&gt;&gt;&gt;,\n) -&gt; <a class=\"struct\" href=\"hir/next_solver/infer/struct.TypeTrace.html\" title=\"struct hir::next_solver::infer::TypeTrace\">TypeTrace</a>&lt;'db&gt;</h4></section></div></details>","ToTrace<'db>","hir::next_solver::Binder","hir::next_solver::PolyFnSig"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TypeFoldable%3CI%3E-for-Binder%3CI,+T%3E\" class=\"impl\"><a href=\"#impl-TypeFoldable%3CI%3E-for-Binder%3CI,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; TypeFoldable&lt;I&gt; for Binder&lt;I, T&gt;<div class=\"where\">where\n    I: Interner,\n    T: TypeFoldable&lt;I&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_fold_with\" class=\"method trait-impl\"><a href=\"#method.try_fold_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_fold_with</a>&lt;F&gt;(\n    self,\n    folder: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;mut F</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Binder&lt;I, T&gt;, &lt;F as FallibleTypeFolder&lt;I&gt;&gt;::Error&gt;<div class=\"where\">where\n    F: FallibleTypeFolder&lt;I&gt;,</div></h4></section></summary><div class='docblock'>The entry point for folding. To fold a value <code>t</code> with a folder <code>f</code>\ncall: <code>t.try_fold_with(f)</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fold_with\" class=\"method trait-impl\"><a href=\"#method.fold_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">fold_with</a>&lt;F&gt;(self, folder: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;mut F</a>) -&gt; Binder&lt;I, T&gt;<div class=\"where\">where\n    F: TypeFolder&lt;I&gt;,</div></h4></section></summary><div class='docblock'>The entry point for folding. To fold a value <code>t</code> with a folder <code>f</code>\ncall: <code>t.fold_with(f)</code>. <a>Read more</a></div></details></div></details>","TypeFoldable<I>","hir::next_solver::BoundExistentialPredicate","hir::next_solver::PolyTraitPredicate","hir::next_solver::PolyRegionOutlivesPredicate","hir::next_solver::PolyTypeOutlivesPredicate","hir::next_solver::PolySubtypePredicate","hir::next_solver::PolyCoercePredicate","hir::next_solver::PolyProjectionPredicate","hir::next_solver::PolyTraitRef","hir::next_solver::PolyExistentialTraitRef","hir::next_solver::PolyExistentialProjection","hir::next_solver::Binder","hir::next_solver::PolyFnSig"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TypeSuperFoldable%3CI%3E-for-Binder%3CI,+T%3E\" class=\"impl\"><a href=\"#impl-TypeSuperFoldable%3CI%3E-for-Binder%3CI,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; TypeSuperFoldable&lt;I&gt; for Binder&lt;I, T&gt;<div class=\"where\">where\n    I: Interner,\n    T: TypeFoldable&lt;I&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_super_fold_with\" class=\"method trait-impl\"><a href=\"#method.try_super_fold_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_super_fold_with</a>&lt;F&gt;(\n    self,\n    folder: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;mut F</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Binder&lt;I, T&gt;, &lt;F as FallibleTypeFolder&lt;I&gt;&gt;::Error&gt;<div class=\"where\">where\n    F: FallibleTypeFolder&lt;I&gt;,</div></h4></section></summary><div class='docblock'>Provides a default fold for a recursive type of interest. This should\nonly be called within <code>TypeFolder</code> methods, when a non-custom traversal\nis desired for the value of the type of interest passed to that method.\nFor example, in <code>MyFolder::try_fold_ty(ty)</code>, it is valid to call\n<code>ty.try_super_fold_with(self)</code>, but any other folding should be done\nwith <code>xyz.try_fold_with(self)</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.super_fold_with\" class=\"method trait-impl\"><a href=\"#method.super_fold_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">super_fold_with</a>&lt;F&gt;(self, folder: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;mut F</a>) -&gt; Binder&lt;I, T&gt;<div class=\"where\">where\n    F: TypeFolder&lt;I&gt;,</div></h4></section></summary><div class='docblock'>A convenient alternative to <code>try_super_fold_with</code> for use with\ninfallible folders. Do not override this method, to ensure coherence\nwith <code>try_super_fold_with</code>.</div></details></div></details>","TypeSuperFoldable<I>","hir::next_solver::BoundExistentialPredicate","hir::next_solver::PolyTraitPredicate","hir::next_solver::PolyRegionOutlivesPredicate","hir::next_solver::PolyTypeOutlivesPredicate","hir::next_solver::PolySubtypePredicate","hir::next_solver::PolyCoercePredicate","hir::next_solver::PolyProjectionPredicate","hir::next_solver::PolyTraitRef","hir::next_solver::PolyExistentialTraitRef","hir::next_solver::PolyExistentialProjection","hir::next_solver::Binder","hir::next_solver::PolyFnSig"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TypeSuperVisitable%3CI%3E-for-Binder%3CI,+T%3E\" class=\"impl\"><a href=\"#impl-TypeSuperVisitable%3CI%3E-for-Binder%3CI,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; TypeSuperVisitable&lt;I&gt; for Binder&lt;I, T&gt;<div class=\"where\">where\n    I: Interner,\n    T: TypeVisitable&lt;I&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.super_visit_with\" class=\"method trait-impl\"><a href=\"#method.super_visit_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">super_visit_with</a>&lt;V&gt;(&amp;self, visitor: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;mut V</a>) -&gt; &lt;V as TypeVisitor&lt;I&gt;&gt;::Result<div class=\"where\">where\n    V: TypeVisitor&lt;I&gt;,</div></h4></section></summary><div class='docblock'>Provides a default visit for a recursive type of interest. This should\nonly be called within <code>TypeVisitor</code> methods, when a non-custom\ntraversal is desired for the value of the type of interest passed to\nthat method. For example, in <code>MyVisitor::visit_ty(ty)</code>, it is valid to\ncall <code>ty.super_visit_with(self)</code>, but any other visiting should be done\nwith <code>xyz.visit_with(self)</code>.</div></details></div></details>","TypeSuperVisitable<I>","hir::next_solver::BoundExistentialPredicate","hir::next_solver::PolyTraitPredicate","hir::next_solver::PolyRegionOutlivesPredicate","hir::next_solver::PolyTypeOutlivesPredicate","hir::next_solver::PolySubtypePredicate","hir::next_solver::PolyCoercePredicate","hir::next_solver::PolyProjectionPredicate","hir::next_solver::PolyTraitRef","hir::next_solver::PolyExistentialTraitRef","hir::next_solver::PolyExistentialProjection","hir::next_solver::Binder","hir::next_solver::PolyFnSig"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TypeVisitable%3CI%3E-for-Binder%3CI,+T%3E\" class=\"impl\"><a href=\"#impl-TypeVisitable%3CI%3E-for-Binder%3CI,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; TypeVisitable&lt;I&gt; for Binder&lt;I, T&gt;<div class=\"where\">where\n    I: Interner,\n    T: TypeVisitable&lt;I&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.visit_with\" class=\"method trait-impl\"><a href=\"#method.visit_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">visit_with</a>&lt;V&gt;(&amp;self, visitor: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;mut V</a>) -&gt; &lt;V as TypeVisitor&lt;I&gt;&gt;::Result<div class=\"where\">where\n    V: TypeVisitor&lt;I&gt;,</div></h4></section></summary><div class='docblock'>The entry point for visiting. To visit a value <code>t</code> with a visitor <code>v</code>\ncall: <code>t.visit_with(v)</code>. <a>Read more</a></div></details></div></details>","TypeVisitable<I>","hir::next_solver::BoundExistentialPredicate","hir::next_solver::PolyTraitPredicate","hir::next_solver::PolyRegionOutlivesPredicate","hir::next_solver::PolyTypeOutlivesPredicate","hir::next_solver::PolySubtypePredicate","hir::next_solver::PolyCoercePredicate","hir::next_solver::PolyProjectionPredicate","hir::next_solver::PolyTraitRef","hir::next_solver::PolyExistentialTraitRef","hir::next_solver::PolyExistentialProjection","hir::next_solver::Binder","hir::next_solver::PolyFnSig"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpcastFrom%3CI,+Binder%3CI,+TraitRef%3CI%3E%3E%3E-for-Binder%3CI,+TraitPredicate%3CI%3E%3E\" class=\"impl\"><a href=\"#impl-UpcastFrom%3CI,+Binder%3CI,+TraitRef%3CI%3E%3E%3E-for-Binder%3CI,+TraitPredicate%3CI%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; UpcastFrom&lt;I, Binder&lt;I, TraitRef&lt;I&gt;&gt;&gt; for Binder&lt;I, TraitPredicate&lt;I&gt;&gt;<div class=\"where\">where\n    I: Interner,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.upcast_from\" class=\"method trait-impl\"><a href=\"#method.upcast_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">upcast_from</a>(\n    from: Binder&lt;I, TraitRef&lt;I&gt;&gt;,\n    _tcx: I,\n) -&gt; Binder&lt;I, TraitPredicate&lt;I&gt;&gt;</h4></section></div></details>","UpcastFrom<I, Binder<I, TraitRef<I>>>","hir::next_solver::PolyTraitPredicate","hir::next_solver::Binder"],["<section id=\"impl-Copy-for-Binder%3CI,+T%3E\" class=\"impl\"><a href=\"#impl-Copy-for-Binder%3CI,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for Binder&lt;I, T&gt;<div class=\"where\">where\n    I: Interner,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section>","Copy","hir::next_solver::BoundExistentialPredicate","hir::next_solver::PolyTraitPredicate","hir::next_solver::PolyRegionOutlivesPredicate","hir::next_solver::PolyTypeOutlivesPredicate","hir::next_solver::PolySubtypePredicate","hir::next_solver::PolyCoercePredicate","hir::next_solver::PolyProjectionPredicate","hir::next_solver::PolyTraitRef","hir::next_solver::PolyExistentialTraitRef","hir::next_solver::PolyExistentialProjection","hir::next_solver::Binder","hir::next_solver::PolyFnSig"],["<section id=\"impl-Eq-for-Binder%3CI,+T%3E\" class=\"impl\"><a href=\"#impl-Eq-for-Binder%3CI,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for Binder&lt;I, T&gt;<div class=\"where\">where\n    I: Interner,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","hir::next_solver::BoundExistentialPredicate","hir::next_solver::PolyTraitPredicate","hir::next_solver::PolyRegionOutlivesPredicate","hir::next_solver::PolyTypeOutlivesPredicate","hir::next_solver::PolySubtypePredicate","hir::next_solver::PolyCoercePredicate","hir::next_solver::PolyProjectionPredicate","hir::next_solver::PolyTraitRef","hir::next_solver::PolyExistentialTraitRef","hir::next_solver::PolyExistentialProjection","hir::next_solver::Binder","hir::next_solver::PolyFnSig"]]],["hir_ty",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binder%3CI,+ExistentialPredicate%3CI%3E%3E\" class=\"impl\"><a href=\"#impl-Binder%3CI,+ExistentialPredicate%3CI%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; Binder&lt;I, ExistentialPredicate&lt;I&gt;&gt;<div class=\"where\">where\n    I: Interner,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_self_ty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_self_ty</a>(\n    &amp;self,\n    cx: I,\n    self_ty: &lt;I as Interner&gt;::Ty,\n) -&gt; &lt;I as Interner&gt;::Clause</h4></section></summary><div class=\"docblock\"><p>Given an existential predicate like <code>?Self: PartialEq&lt;u32&gt;</code> (e.g., derived from <code>dyn PartialEq&lt;u32&gt;</code>),\nand a concrete type <code>self_ty</code>, returns a full predicate where the existentially quantified variable <code>?Self</code>\nhas been replaced with <code>self_ty</code> (e.g., <code>self_ty: PartialEq&lt;u32&gt;</code>, in our example).</p>\n</div></details></div></details>",0,"hir_ty::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binder%3CI,+ExistentialProjection%3CI%3E%3E\" class=\"impl\"><a href=\"#impl-Binder%3CI,+ExistentialProjection%3CI%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; Binder&lt;I, ExistentialProjection&lt;I&gt;&gt;<div class=\"where\">where\n    I: Interner,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.with_self_ty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_self_ty</a>(\n    &amp;self,\n    cx: I,\n    self_ty: &lt;I as Interner&gt;::Ty,\n) -&gt; Binder&lt;I, ProjectionPredicate&lt;I&gt;&gt;</h4></section><section id=\"method.item_def_id\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">item_def_id</a>(&amp;self) -&gt; &lt;I as Interner&gt;::DefId</h4></section></div></details>",0,"hir_ty::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binder%3CI,+ExistentialTraitRef%3CI%3E%3E\" class=\"impl\"><a href=\"#impl-Binder%3CI,+ExistentialTraitRef%3CI%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; Binder&lt;I, ExistentialTraitRef&lt;I&gt;&gt;<div class=\"where\">where\n    I: Interner,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.def_id\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">def_id</a>(&amp;self) -&gt; &lt;I as Interner&gt;::TraitId</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_self_ty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_self_ty</a>(\n    &amp;self,\n    cx: I,\n    self_ty: &lt;I as Interner&gt;::Ty,\n) -&gt; Binder&lt;I, TraitRef&lt;I&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Object types don’t have a self type specified. Therefore, when\nwe convert the principal trait-ref into a normal trait-ref,\nyou must give <em>some</em> self type. A common choice is <code>mk_err()</code>\nor some placeholder type.</p>\n</div></details></div></details>",0,"hir_ty::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binder%3CI,+FnSig%3CI%3E%3E\" class=\"impl\"><a href=\"#impl-Binder%3CI,+FnSig%3CI%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; Binder&lt;I, FnSig&lt;I&gt;&gt;<div class=\"where\">where\n    I: Interner,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.inputs\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">inputs</a>(self) -&gt; Binder&lt;I, &lt;I as Interner&gt;::FnInputTys&gt;</h4></section><section id=\"method.input\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">input</a>(self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>) -&gt; Binder&lt;I, &lt;I as Interner&gt;::Ty&gt;</h4></section><section id=\"method.inputs_and_output\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">inputs_and_output</a>(self) -&gt; Binder&lt;I, &lt;I as Interner&gt;::Tys&gt;</h4></section><section id=\"method.output\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">output</a>(self) -&gt; Binder&lt;I, &lt;I as Interner&gt;::Ty&gt;</h4></section><section id=\"method.c_variadic\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">c_variadic</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section><section id=\"method.safety\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">safety</a>(self) -&gt; &lt;I as Interner&gt;::Safety</h4></section><section id=\"method.abi\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">abi</a>(self) -&gt; &lt;I as Interner&gt;::Abi</h4></section><section id=\"method.is_fn_trait_compatible\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_fn_trait_compatible</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section><section id=\"method.split\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">split</a>(self) -&gt; (Binder&lt;I, FnSigTys&lt;I&gt;&gt;, FnHeader&lt;I&gt;)</h4></section></div></details>",0,"hir_ty::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binder%3CI,+FnSigTys%3CI%3E%3E\" class=\"impl\"><a href=\"#impl-Binder%3CI,+FnSigTys%3CI%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; Binder&lt;I, FnSigTys&lt;I&gt;&gt;<div class=\"where\">where\n    I: Interner,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.with\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with</a>(self, hdr: FnHeader&lt;I&gt;) -&gt; Binder&lt;I, FnSig&lt;I&gt;&gt;</h4></section><section id=\"method.inputs\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">inputs</a>(self) -&gt; Binder&lt;I, &lt;I as Interner&gt;::FnInputTys&gt;</h4></section><section id=\"method.input\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">input</a>(self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.usize.html\">usize</a>) -&gt; Binder&lt;I, &lt;I as Interner&gt;::Ty&gt;</h4></section><section id=\"method.inputs_and_output\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">inputs_and_output</a>(self) -&gt; Binder&lt;I, &lt;I as Interner&gt;::Tys&gt;</h4></section><section id=\"method.output\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">output</a>(self) -&gt; Binder&lt;I, &lt;I as Interner&gt;::Ty&gt;</h4></section></div></details>",0,"hir_ty::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binder%3CI,+HostEffectPredicate%3CI%3E%3E\" class=\"impl\"><a href=\"#impl-Binder%3CI,+HostEffectPredicate%3CI%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; Binder&lt;I, HostEffectPredicate&lt;I&gt;&gt;<div class=\"where\">where\n    I: Interner,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.def_id\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">def_id</a>(self) -&gt; &lt;I as Interner&gt;::TraitId</h4></section><section id=\"method.self_ty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">self_ty</a>(self) -&gt; Binder&lt;I, &lt;I as Interner&gt;::Ty&gt;</h4></section><section id=\"method.constness\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">constness</a>(self) -&gt; BoundConstness</h4></section></div></details>",0,"hir_ty::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binder%3CI,+Option%3CT%3E%3E\" class=\"impl\"><a href=\"#impl-Binder%3CI,+Option%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; Binder&lt;I, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;<div class=\"where\">where\n    I: Interner,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.transpose\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">transpose</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Binder&lt;I, T&gt;&gt;</h4></section></div></details>",0,"hir_ty::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binder%3CI,+ProjectionPredicate%3CI%3E%3E\" class=\"impl\"><a href=\"#impl-Binder%3CI,+ProjectionPredicate%3CI%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; Binder&lt;I, ProjectionPredicate&lt;I&gt;&gt;<div class=\"where\">where\n    I: Interner,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.trait_def_id\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">trait_def_id</a>(&amp;self, cx: I) -&gt; &lt;I as Interner&gt;::TraitId</h4></section></summary><div class=\"docblock\"><p>Returns the <code>DefId</code> of the trait of the associated item being projected.</p>\n</div></details><section id=\"method.term\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">term</a>(&amp;self) -&gt; Binder&lt;I, &lt;I as Interner&gt;::Term&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.item_def_id\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">item_def_id</a>(&amp;self) -&gt; &lt;I as Interner&gt;::DefId</h4></section></summary><div class=\"docblock\"><p>The <code>DefId</code> of the <code>TraitItem</code> for the associated type.</p>\n<p>Note that this is not the <code>DefId</code> of the <code>TraitRef</code> containing this\nassociated type, which is in <code>tcx.associated_item(projection_def_id()).container</code>.</p>\n</div></details></div></details>",0,"hir_ty::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binder%3CI,+T%3E\" class=\"impl\"><a href=\"#impl-Binder%3CI,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; Binder&lt;I, T&gt;<div class=\"where\">where\n    I: Interner,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.skip_binder\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">skip_binder</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the value contained inside of this <code>for&lt;'a&gt;</code>. Accessing generic args\nin the returned value is generally incorrect.</p>\n<p>Please read <a href=\"https://rustc-dev-guide.rust-lang.org/ty_module/instantiating_binders.html\">https://rustc-dev-guide.rust-lang.org/ty_module/instantiating_binders.html</a>\nbefore using this function. It is usually better to discharge the binder using\n<code>no_bound_vars</code> or <code>instantiate_bound_regions</code> or something like that.</p>\n<p><code>skip_binder</code> is only valid when you are either extracting data that does not reference\nany generic arguments, e.g. a <code>DefId</code>, or when you’re making sure you only pass the\nvalue to things which can handle escaping bound vars.</p>\n<p>See existing uses of <code>.skip_binder()</code> in <code>rustc_trait_selection::traits::select</code>\nor <code>rustc_next_trait_solver</code> for examples.</p>\n</div></details><section id=\"method.bound_vars\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">bound_vars</a>(&amp;self) -&gt; &lt;I as Interner&gt;::BoundVarKinds</h4></section><section id=\"method.as_ref\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_ref</a>(&amp;self) -&gt; Binder&lt;I, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;T</a>&gt;</h4></section><section id=\"method.as_deref\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_deref</a>(&amp;self) -&gt; Binder&lt;I, &amp;&lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.91.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>,</div></h4></section><section id=\"method.map_bound_ref\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">map_bound_ref</a>&lt;F, U&gt;(&amp;self, f: F) -&gt; Binder&lt;I, U&gt;<div class=\"where\">where\n    U: TypeVisitable&lt;I&gt;,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;T</a>) -&gt; U,</div></h4></section><section id=\"method.map_bound\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">map_bound</a>&lt;F, U&gt;(self, f: F) -&gt; Binder&lt;I, U&gt;<div class=\"where\">where\n    U: TypeVisitable&lt;I&gt;,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section><section id=\"method.try_map_bound\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_map_bound</a>&lt;F, U, E&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Binder&lt;I, U&gt;, E&gt;<div class=\"where\">where\n    U: TypeVisitable&lt;I&gt;,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;U, E&gt;,</div></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.rebind\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">rebind</a>&lt;U&gt;(&amp;self, value: U) -&gt; Binder&lt;I, U&gt;<div class=\"where\">where\n    U: TypeVisitable&lt;I&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Wraps a <code>value</code> in a binder, using the same bound variables as the\ncurrent <code>Binder</code>. This should not be used if the new value <em>changes</em>\nthe bound variables. Note: the (old or new) value itself does not\nnecessarily need to <em>name</em> all the bound variables.</p>\n<p>This currently doesn’t do anything different than <code>bind</code>, because we\ndon’t actually track bound vars. However, semantically, it is different\nbecause bound vars aren’t allowed to change here, whereas they are\nin <code>bind</code>. This may be (debug) asserted in the future.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.no_bound_vars\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">no_bound_vars</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: TypeVisitable&lt;I&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Unwraps and returns the value within, but only if it contains\nno bound vars at all. (In other words, if this binder –\nand indeed any enclosing binder – doesn’t bind anything at\nall.) Otherwise, returns <code>None</code>.</p>\n<p>(One could imagine having a method that just unwraps a single\nbinder, but permits late-bound vars bound by enclosing\nbinders, but that would require adjusting the debruijn\nindices, and given the shallow binding structure we often use,\nwould not be that useful.)</p>\n</div></details></div></details>",0,"hir_ty::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binder%3CI,+T%3E\" class=\"impl\"><a href=\"#impl-Binder%3CI,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; Binder&lt;I, T&gt;<div class=\"where\">where\n    I: Interner,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.iter\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">iter</a>(self) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = Binder&lt;I, &lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.91.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" title=\"type core::iter::traits::collect::IntoIterator::Item\">Item</a>&gt;&gt;</h4></section></div></details>",0,"hir_ty::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binder%3CI,+T%3E\" class=\"impl\"><a href=\"#impl-Binder%3CI,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; Binder&lt;I, T&gt;<div class=\"where\">where\n    I: Interner,\n    T: TypeVisitable&lt;I&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.dummy\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">dummy</a>(value: T) -&gt; Binder&lt;I, T&gt;</h4></section></summary><div class=\"docblock\"><p>Wraps <code>value</code> in a binder, asserting that <code>value</code> does not\ncontain any bound vars that would be bound by the\nbinder. This is commonly used to ‘inject’ a value T into a\ndifferent binding level.</p>\n</div></details><section id=\"method.bind_with_vars\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">bind_with_vars</a>(\n    value: T,\n    bound_vars: &lt;I as Interner&gt;::BoundVarKinds,\n) -&gt; Binder&lt;I, T&gt;</h4></section></div></details>",0,"hir_ty::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binder%3CI,+TraitPredicate%3CI%3E%3E\" class=\"impl\"><a href=\"#impl-Binder%3CI,+TraitPredicate%3CI%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; Binder&lt;I, TraitPredicate&lt;I&gt;&gt;<div class=\"where\">where\n    I: Interner,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.def_id\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">def_id</a>(self) -&gt; &lt;I as Interner&gt;::TraitId</h4></section><section id=\"method.self_ty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">self_ty</a>(self) -&gt; Binder&lt;I, &lt;I as Interner&gt;::Ty&gt;</h4></section><section id=\"method.polarity\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">polarity</a>(self) -&gt; PredicatePolarity</h4></section></div></details>",0,"hir_ty::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binder%3CI,+TraitRef%3CI%3E%3E\" class=\"impl\"><a href=\"#impl-Binder%3CI,+TraitRef%3CI%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; Binder&lt;I, TraitRef&lt;I&gt;&gt;<div class=\"where\">where\n    I: Interner,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.self_ty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">self_ty</a>(&amp;self) -&gt; Binder&lt;I, &lt;I as Interner&gt;::Ty&gt;</h4></section><section id=\"method.def_id\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">def_id</a>(&amp;self) -&gt; &lt;I as Interner&gt;::TraitId</h4></section><section id=\"method.to_host_effect_clause\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">to_host_effect_clause</a>(\n    self,\n    cx: I,\n    constness: BoundConstness,\n) -&gt; &lt;I as Interner&gt;::Clause</h4></section></div></details>",0,"hir_ty::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Binder%3CI,+T%3E\" class=\"impl\"><a href=\"#impl-Clone-for-Binder%3CI,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for Binder&lt;I, T&gt;<div class=\"where\">where\n    I: Interner,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Binder&lt;I, T&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/core/clone.rs.html#245-247\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.91.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","hir_ty::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Binder%3CI,+T%3E\" class=\"impl\"><a href=\"#impl-Debug-for-Binder%3CI,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for Binder&lt;I, T&gt;<div class=\"where\">where\n    I: Interner,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, __f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","hir_ty::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-Binder%3CI,+T%3E\" class=\"impl\"><a href=\"#impl-Display-for-Binder%3CI,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for Binder&lt;I, T&gt;<div class=\"where\">where\n    I: Interner + IrPrint&lt;Binder&lt;I, T&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.91.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.91.0/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","hir_ty::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CUnsafeBinderInner%3CI%3E%3E-for-Binder%3CI,+%3CI+as+Interner%3E::Ty%3E\" class=\"impl\"><a href=\"#impl-From%3CUnsafeBinderInner%3CI%3E%3E-for-Binder%3CI,+%3CI+as+Interner%3E::Ty%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;UnsafeBinderInner&lt;I&gt;&gt; for Binder&lt;I, &lt;I as Interner&gt;::Ty&gt;<div class=\"where\">where\n    I: Interner,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: UnsafeBinderInner&lt;I&gt;) -&gt; Binder&lt;I, &lt;I as Interner&gt;::Ty&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<UnsafeBinderInner<I>>","hir_ty::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Binder%3CI,+T%3E\" class=\"impl\"><a href=\"#impl-Hash-for-Binder%3CI,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for Binder&lt;I, T&gt;<div class=\"where\">where\n    I: Interner,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, __state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.91.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.91.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.91.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.91.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","hir_ty::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Lift%3CU%3E-for-Binder%3CI,+T%3E\" class=\"impl\"><a href=\"#impl-Lift%3CU%3E-for-Binder%3CI,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, U, T&gt; Lift&lt;U&gt; for Binder&lt;I, T&gt;<div class=\"where\">where\n    I: Interner,\n    U: Interner,\n    T: Lift&lt;U&gt;,\n    &lt;I as Interner&gt;::BoundVarKinds: Lift&lt;U, Lifted = &lt;U as Interner&gt;::BoundVarKinds&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Lifted\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Lifted\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Lifted</a> = Binder&lt;U, &lt;T as Lift&lt;U&gt;&gt;::Lifted&gt;</h4></section><section id=\"method.lift_to_interner\" class=\"method trait-impl\"><a href=\"#method.lift_to_interner\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lift_to_interner</a>(self, cx: U) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;Binder&lt;I, T&gt; as Lift&lt;U&gt;&gt;::Lifted&gt;</h4></section></div></details>","Lift<U>","hir_ty::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Binder%3CI,+T%3E\" class=\"impl\"><a href=\"#impl-PartialEq-for-Binder%3CI,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for Binder&lt;I, T&gt;<div class=\"where\">where\n    I: Interner,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, __other: &amp;Binder&lt;I, T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.91.0/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","hir_ty::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Relate%3CI%3E-for-Binder%3CI,+T%3E\" class=\"impl\"><a href=\"#impl-Relate%3CI%3E-for-Binder%3CI,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; <a class=\"trait\" href=\"hir_ty/next_solver/infer/relate/trait.Relate.html\" title=\"trait hir_ty::next_solver::infer::relate::Relate\">Relate</a>&lt;I&gt; for Binder&lt;I, T&gt;<div class=\"where\">where\n    I: Interner,\n    T: <a class=\"trait\" href=\"hir_ty/next_solver/infer/relate/trait.Relate.html\" title=\"trait hir_ty::next_solver::infer::relate::Relate\">Relate</a>&lt;I&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.relate\" class=\"method trait-impl\"><a href=\"#method.relate\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hir_ty/next_solver/infer/relate/trait.Relate.html#tymethod.relate\" class=\"fn\">relate</a>&lt;R&gt;(\n    relation: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;mut R</a>,\n    a: Binder&lt;I, T&gt;,\n    b: Binder&lt;I, T&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Binder&lt;I, T&gt;, TypeError&lt;I&gt;&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"hir_ty/next_solver/infer/relate/trait.TypeRelation.html\" title=\"trait hir_ty::next_solver::infer::relate::TypeRelation\">TypeRelation</a>&lt;I&gt;,</div></h4></section></div></details>","Relate<I>","hir_ty::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TypeFoldable%3CI%3E-for-Binder%3CI,+T%3E\" class=\"impl\"><a href=\"#impl-TypeFoldable%3CI%3E-for-Binder%3CI,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; TypeFoldable&lt;I&gt; for Binder&lt;I, T&gt;<div class=\"where\">where\n    I: Interner,\n    T: TypeFoldable&lt;I&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_fold_with\" class=\"method trait-impl\"><a href=\"#method.try_fold_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_fold_with</a>&lt;F&gt;(\n    self,\n    folder: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;mut F</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Binder&lt;I, T&gt;, &lt;F as FallibleTypeFolder&lt;I&gt;&gt;::Error&gt;<div class=\"where\">where\n    F: FallibleTypeFolder&lt;I&gt;,</div></h4></section></summary><div class='docblock'>The entry point for folding. To fold a value <code>t</code> with a folder <code>f</code>\ncall: <code>t.try_fold_with(f)</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fold_with\" class=\"method trait-impl\"><a href=\"#method.fold_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">fold_with</a>&lt;F&gt;(self, folder: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;mut F</a>) -&gt; Binder&lt;I, T&gt;<div class=\"where\">where\n    F: TypeFolder&lt;I&gt;,</div></h4></section></summary><div class='docblock'>The entry point for folding. To fold a value <code>t</code> with a folder <code>f</code>\ncall: <code>t.fold_with(f)</code>. <a>Read more</a></div></details></div></details>","TypeFoldable<I>","hir_ty::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TypeSuperFoldable%3CI%3E-for-Binder%3CI,+T%3E\" class=\"impl\"><a href=\"#impl-TypeSuperFoldable%3CI%3E-for-Binder%3CI,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; TypeSuperFoldable&lt;I&gt; for Binder&lt;I, T&gt;<div class=\"where\">where\n    I: Interner,\n    T: TypeFoldable&lt;I&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_super_fold_with\" class=\"method trait-impl\"><a href=\"#method.try_super_fold_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_super_fold_with</a>&lt;F&gt;(\n    self,\n    folder: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;mut F</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.91.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Binder&lt;I, T&gt;, &lt;F as FallibleTypeFolder&lt;I&gt;&gt;::Error&gt;<div class=\"where\">where\n    F: FallibleTypeFolder&lt;I&gt;,</div></h4></section></summary><div class='docblock'>Provides a default fold for a recursive type of interest. This should\nonly be called within <code>TypeFolder</code> methods, when a non-custom traversal\nis desired for the value of the type of interest passed to that method.\nFor example, in <code>MyFolder::try_fold_ty(ty)</code>, it is valid to call\n<code>ty.try_super_fold_with(self)</code>, but any other folding should be done\nwith <code>xyz.try_fold_with(self)</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.super_fold_with\" class=\"method trait-impl\"><a href=\"#method.super_fold_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">super_fold_with</a>&lt;F&gt;(self, folder: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;mut F</a>) -&gt; Binder&lt;I, T&gt;<div class=\"where\">where\n    F: TypeFolder&lt;I&gt;,</div></h4></section></summary><div class='docblock'>A convenient alternative to <code>try_super_fold_with</code> for use with\ninfallible folders. Do not override this method, to ensure coherence\nwith <code>try_super_fold_with</code>.</div></details></div></details>","TypeSuperFoldable<I>","hir_ty::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TypeSuperVisitable%3CI%3E-for-Binder%3CI,+T%3E\" class=\"impl\"><a href=\"#impl-TypeSuperVisitable%3CI%3E-for-Binder%3CI,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; TypeSuperVisitable&lt;I&gt; for Binder&lt;I, T&gt;<div class=\"where\">where\n    I: Interner,\n    T: TypeVisitable&lt;I&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.super_visit_with\" class=\"method trait-impl\"><a href=\"#method.super_visit_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">super_visit_with</a>&lt;V&gt;(&amp;self, visitor: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;mut V</a>) -&gt; &lt;V as TypeVisitor&lt;I&gt;&gt;::Result<div class=\"where\">where\n    V: TypeVisitor&lt;I&gt;,</div></h4></section></summary><div class='docblock'>Provides a default visit for a recursive type of interest. This should\nonly be called within <code>TypeVisitor</code> methods, when a non-custom\ntraversal is desired for the value of the type of interest passed to\nthat method. For example, in <code>MyVisitor::visit_ty(ty)</code>, it is valid to\ncall <code>ty.super_visit_with(self)</code>, but any other visiting should be done\nwith <code>xyz.visit_with(self)</code>.</div></details></div></details>","TypeSuperVisitable<I>","hir_ty::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TypeVisitable%3CI%3E-for-Binder%3CI,+T%3E\" class=\"impl\"><a href=\"#impl-TypeVisitable%3CI%3E-for-Binder%3CI,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; TypeVisitable&lt;I&gt; for Binder&lt;I, T&gt;<div class=\"where\">where\n    I: Interner,\n    T: TypeVisitable&lt;I&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.visit_with\" class=\"method trait-impl\"><a href=\"#method.visit_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">visit_with</a>&lt;V&gt;(&amp;self, visitor: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.91.0/std/primitive.reference.html\">&amp;mut V</a>) -&gt; &lt;V as TypeVisitor&lt;I&gt;&gt;::Result<div class=\"where\">where\n    V: TypeVisitor&lt;I&gt;,</div></h4></section></summary><div class='docblock'>The entry point for visiting. To visit a value <code>t</code> with a visitor <code>v</code>\ncall: <code>t.visit_with(v)</code>. <a>Read more</a></div></details></div></details>","TypeVisitable<I>","hir_ty::next_solver::Binder"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpcastFrom%3CI,+Binder%3CI,+TraitRef%3CI%3E%3E%3E-for-Binder%3CI,+TraitPredicate%3CI%3E%3E\" class=\"impl\"><a href=\"#impl-UpcastFrom%3CI,+Binder%3CI,+TraitRef%3CI%3E%3E%3E-for-Binder%3CI,+TraitPredicate%3CI%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; UpcastFrom&lt;I, Binder&lt;I, TraitRef&lt;I&gt;&gt;&gt; for Binder&lt;I, TraitPredicate&lt;I&gt;&gt;<div class=\"where\">where\n    I: Interner,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.upcast_from\" class=\"method trait-impl\"><a href=\"#method.upcast_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">upcast_from</a>(\n    from: Binder&lt;I, TraitRef&lt;I&gt;&gt;,\n    _tcx: I,\n) -&gt; Binder&lt;I, TraitPredicate&lt;I&gt;&gt;</h4></section></div></details>","UpcastFrom<I, Binder<I, TraitRef<I>>>","hir_ty::next_solver::Binder"],["<section id=\"impl-Copy-for-Binder%3CI,+T%3E\" class=\"impl\"><a href=\"#impl-Copy-for-Binder%3CI,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for Binder&lt;I, T&gt;<div class=\"where\">where\n    I: Interner,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section>","Copy","hir_ty::next_solver::Binder"],["<section id=\"impl-Eq-for-Binder%3CI,+T%3E\" class=\"impl\"><a href=\"#impl-Eq-for-Binder%3CI,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for Binder&lt;I, T&gt;<div class=\"where\">where\n    I: Interner,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.91.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","hir_ty::next_solver::Binder"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[69927,45121]}